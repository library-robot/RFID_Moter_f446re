
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007204  08007204  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800720c  0800720c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000490c  20000060  08007274  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000496c  08007274  0002496c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e9c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e4d  00000000  00000000  00038f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001066  00000000  00000000  0003e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024daf  00000000  00000000  0003f35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac9c  00000000  00000000  0006410d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbaae  00000000  00000000  0007eda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059a4  00000000  00000000  0015a858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001601fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007114 	.word	0x08007114

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007114 	.word	0x08007114

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_DMA_Init+0x3c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <MX_DMA_Init+0x3c>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_DMA_Init+0x3c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2105      	movs	r1, #5
 8000532:	2044      	movs	r0, #68	; 0x44
 8000534:	f001 f994 	bl	8001860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000538:	2044      	movs	r0, #68	; 0x44
 800053a:	f001 f9ad 	bl	8001898 <HAL_NVIC_EnableIRQ>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <vApplicationGetIdleTaskMemory+0x2c>)
 800055c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <vApplicationGetIdleTaskMemory+0x30>)
 8000562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000008c 	.word	0x2000008c
 800057c:	2000012c 	.word	0x2000012c

08000580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b09c      	sub	sp, #112	; 0x70
 8000584:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000586:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_FREERTOS_Init+0xa4>)
 8000588:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fe8e 	bl	80052c2 <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <MX_FREERTOS_Init+0xa8>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_FREERTOS_Init+0xac>)
 80005ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80005c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fe7b 	bl	80052c2 <osThreadCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <MX_FREERTOS_Init+0xb0>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_FREERTOS_Init+0xb4>)
 80005d4:	f107 041c 	add.w	r4, r7, #28
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fe68 	bl	80052c2 <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <MX_FREERTOS_Init+0xb8>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of rc522_read */
  osThreadDef(rc522_read, rc522_readTask, osPriorityNormal, 0, 128);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_FREERTOS_Init+0xbc>)
 80005fa:	463c      	mov	r4, r7
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rc522_readHandle = osThreadCreate(osThread(rc522_read), NULL);
 800060a:	463b      	mov	r3, r7
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fe57 	bl	80052c2 <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <MX_FREERTOS_Init+0xc0>)
 8000618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800061a:	bf00      	nop
 800061c:	3770      	adds	r7, #112	; 0x70
 800061e:	46bd      	mov	sp, r7
 8000620:	bdb0      	pop	{r4, r5, r7, pc}
 8000622:	bf00      	nop
 8000624:	08007138 	.word	0x08007138
 8000628:	2000007c 	.word	0x2000007c
 800062c:	08007164 	.word	0x08007164
 8000630:	20000080 	.word	0x20000080
 8000634:	08007190 	.word	0x08007190
 8000638:	20000084 	.word	0x20000084
 800063c:	080071b8 	.word	0x080071b8
 8000640:	20000088 	.word	0x20000088

08000644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 800064c:	f000 fdae 	bl	80011ac <read_rfid_number>
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f004 fe82 	bl	800535a <osDelay>
	read_rfid_number();
 8000656:	e7f9      	b.n	800064c <StartDefaultTask+0x8>

08000658 <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <StartRfidExecuteTask+0x44>)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066a:	6018      	str	r0, [r3, #0]
 800066c:	3304      	adds	r3, #4
 800066e:	8019      	strh	r1, [r3, #0]
 8000670:	3302      	adds	r3, #2
 8000672:	0c0a      	lsrs	r2, r1, #16
 8000674:	701a      	strb	r2, [r3, #0]

	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8000676:	f107 0108 	add.w	r1, r7, #8
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2207      	movs	r2, #7
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <StartRfidExecuteTask+0x48>)
 8000682:	f003 fc4b 	bl	8003f1c <HAL_UART_Transmit>
		vTaskResume(defaultTaskHandle);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <StartRfidExecuteTask+0x4c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fa5c 	bl	8005b48 <vTaskResume>
	    osDelay(500);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000694:	f004 fe61 	bl	800535a <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8000698:	e7ed      	b.n	8000676 <StartRfidExecuteTask+0x1e>
 800069a:	bf00      	nop
 800069c:	080071d4 	.word	0x080071d4
 80006a0:	2000099c 	.word	0x2000099c
 80006a4:	2000007c 	.word	0x2000007c

080006a8 <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTagNumTransmitTask */
  /* Infinite loop */
  osEvent event;
  for(;;)
  {
	event = osSignalWait(transmitSignal, 100);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2264      	movs	r2, #100	; 0x64
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fea3 	bl	8005404 <osSignalWait>
	if(event.value.signals == transmitSignal){
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d101      	bne.n	80006c8 <StartTagNumTransmitTask+0x20>
		transmitData();
 80006c4:	f000 fdd2 	bl	800126c <transmitData>
		}
  osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f004 fe46 	bl	800535a <osDelay>
	event = osSignalWait(transmitSignal, 100);
 80006ce:	e7ef      	b.n	80006b0 <StartTagNumTransmitTask+0x8>

080006d0 <rc522_readTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rc522_readTask */
void rc522_readTask(void const * argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rc522_readTask */
  uint8_t status,cardstr[16] = {0,};
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  for(;;)
  {

	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	2026      	movs	r0, #38	; 0x26
 80006f0:	f000 fad5 	bl	8000c9e <MFRC522_Request>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d111      	bne.n	800071e <rc522_readTask+0x4e>
		status = MFRC522_Anticoll(cardstr);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 faf2 	bl	8000ce8 <MFRC522_Anticoll>
 8000704:	4603      	mov	r3, r0
 8000706:	77fb      	strb	r3, [r7, #31]
		if(status == MI_OK){
 8000708:	7ffb      	ldrb	r3, [r7, #31]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d107      	bne.n	800071e <rc522_readTask+0x4e>
			HAL_UART_Transmit(&huart2, cardstr, 5, 500);
 800070e:	f107 010c 	add.w	r1, r7, #12
 8000712:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000716:	2205      	movs	r2, #5
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <rc522_readTask+0x58>)
 800071a:	f003 fbff 	bl	8003f1c <HAL_UART_Transmit>
		}
	}
	osDelay(300);
 800071e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000722:	f004 fe1a 	bl	800535a <osDelay>
	if(MFRC522_Request(PICC_REQIDL, cardstr) == MI_OK){
 8000726:	e7df      	b.n	80006e8 <rc522_readTask+0x18>
 8000728:	200009e4 	.word	0x200009e4

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <MX_GPIO_Init+0xd0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RC522_CS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2160      	movs	r1, #96	; 0x60
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	f001 fe12 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007d4:	f001 fc70 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RC522_CS_Pin;
 80007d8:	2360      	movs	r3, #96	; 0x60
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007f0:	f001 fc62 	bl	80020b8 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020800 	.word	0x40020800

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 ff2e 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f816 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ff8a 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000818:	f7ff fe78 	bl	800050c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800081c:	f000 fd92 	bl	8001344 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000820:	f000 fd66 	bl	80012f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000824:	f000 fdb8 	bl	8001398 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000828:	f000 fa9c 	bl	8000d64 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 800082c:	f000 fc52 	bl	80010d4 <uart_init>
  MFRC522_Init();
 8000830:	f000 f93e 	bl	8000ab0 <MFRC522_Init>
//  HAL_SPI_Receive_IT(&hspi2,rc522_rx_buf,sizeof(rc522_rx_buf));

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000834:	f7ff fea4 	bl	8000580 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000838:	f004 fd3c 	bl	80052b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083c:	e7fe      	b.n	800083c <main+0x34>
	...

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2234      	movs	r2, #52	; 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fb84 	bl	8006f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <SystemClock_Config+0xdc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a2b      	ldr	r2, [pc, #172]	; (800091c <SystemClock_Config+0xdc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <SystemClock_Config+0xdc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <SystemClock_Config+0xe0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a25      	ldr	r2, [pc, #148]	; (8000920 <SystemClock_Config+0xe0>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <SystemClock_Config+0xe0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008b4:	23b4      	movs	r3, #180	; 0xb4
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 f96f 	bl	8002bac <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008d4:	f000 f835 	bl	8000942 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d8:	f001 fd9c 	bl	8002414 <HAL_PWREx_EnableOverDrive>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008e2:	f000 f82e 	bl	8000942 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	2105      	movs	r1, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fdd5 	bl	80024b4 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000910:	f000 f817 	bl	8000942 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 febb 	bl	80016b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000946:	b672      	cpsid	i
}
 8000948:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094a:	e7fe      	b.n	800094a <Error_Handler+0x8>

0800094c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af02      	add	r7, sp, #8
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000956:	f107 020f 	add.w	r2, r7, #15
 800095a:	1df9      	adds	r1, r7, #7
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2301      	movs	r3, #1
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <RC522_SPI_Transfer+0x28>)
 8000964:	f002 fc49 	bl	80031fa <HAL_SPI_TransmitReceive>

	return rx_data;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000032c 	.word	0x2000032c

08000978 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <Write_MFRC522+0x48>)
 800098e:	f001 fd27 	bl	80023e0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffd4 	bl	800094c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffd0 	bl	800094c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <Write_MFRC522+0x48>)
 80009b2:	f001 fd15 	bl	80023e0 <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020000 	.word	0x40020000

080009c4 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <Read_MFRC522+0x4c>)
 80009d4:	f001 fd04 	bl	80023e0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffad 	bl	800094c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff ffaa 	bl	800094c <RC522_SPI_Transfer>
 80009f8:	4603      	mov	r3, r0
 80009fa:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <Read_MFRC522+0x4c>)
 8000a02:	f001 fced 	bl	80023e0 <HAL_GPIO_WritePin>

	return val;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40020000 	.word	0x40020000

08000a14 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffcc 	bl	80009c4 <Read_MFRC522>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff9b 	bl	8000978 <Write_MFRC522>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	460a      	mov	r2, r1
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	4613      	mov	r3, r2
 8000a58:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffb1 	bl	80009c4 <Read_MFRC522>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000a66:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	b25a      	sxtb	r2, r3
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4013      	ands	r3, r2
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff7b 	bl	8000978 <Write_MFRC522>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000a8e:	2014      	movs	r0, #20
 8000a90:	f7ff ff98 	bl	80009c4 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000a94:	2103      	movs	r1, #3
 8000a96:	2014      	movs	r0, #20
 8000a98:	f7ff ffbc 	bl	8000a14 <SetBitMask>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff66 	bl	8000978 <Write_MFRC522>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MFRC522_Init+0x54>)
 8000aba:	f001 fc91 	bl	80023e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MFRC522_Init+0x58>)
 8000ac4:	f001 fc8c 	bl	80023e0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000ac8:	f7ff ffea 	bl	8000aa0 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000acc:	218d      	movs	r1, #141	; 0x8d
 8000ace:	202a      	movs	r0, #42	; 0x2a
 8000ad0:	f7ff ff52 	bl	8000978 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000ad4:	213e      	movs	r1, #62	; 0x3e
 8000ad6:	202b      	movs	r0, #43	; 0x2b
 8000ad8:	f7ff ff4e 	bl	8000978 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000adc:	211e      	movs	r1, #30
 8000ade:	202d      	movs	r0, #45	; 0x2d
 8000ae0:	f7ff ff4a 	bl	8000978 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	202c      	movs	r0, #44	; 0x2c
 8000ae8:	f7ff ff46 	bl	8000978 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	2015      	movs	r0, #21
 8000af0:	f7ff ff42 	bl	8000978 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000af4:	213d      	movs	r1, #61	; 0x3d
 8000af6:	2011      	movs	r0, #17
 8000af8:	f7ff ff3e 	bl	8000978 <Write_MFRC522>

	AntennaOn();
 8000afc:	f7ff ffc5 	bl	8000a8a <AntennaOn>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	d006      	beq.n	8000b3e <MFRC522_ToCard+0x32>
 8000b30:	2b0e      	cmp	r3, #14
 8000b32:	d109      	bne.n	8000b48 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000b34:	2312      	movs	r3, #18
 8000b36:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	777b      	strb	r3, [r7, #29]
			break;
 8000b3c:	e005      	b.n	8000b4a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000b3e:	2377      	movs	r3, #119	; 0x77
 8000b40:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000b42:	2330      	movs	r3, #48	; 0x30
 8000b44:	777b      	strb	r3, [r7, #29]
			break;
 8000b46:	e000      	b.n	8000b4a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000b48:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000b4a:	7fbb      	ldrb	r3, [r7, #30]
 8000b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff ff0f 	bl	8000978 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f7ff ff74 	bl	8000a4a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	200a      	movs	r0, #10
 8000b66:	f7ff ff55 	bl	8000a14 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff ff03 	bl	8000978 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	e00a      	b.n	8000b8e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	2009      	movs	r0, #9
 8000b84:	f7ff fef8 	bl	8000978 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3f0      	bcc.n	8000b78 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff feec 	bl	8000978 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b0c      	cmp	r3, #12
 8000ba4:	d103      	bne.n	8000bae <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	200d      	movs	r0, #13
 8000baa:	f7ff ff33 	bl	8000a14 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000bae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bb2:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff ff05 	bl	80009c4 <Read_MFRC522>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	773b      	strb	r3, [r7, #28]
        i--;
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <MFRC522_ToCard+0xd4>
 8000bca:	7f3b      	ldrb	r3, [r7, #28]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <MFRC522_ToCard+0xd4>
 8000bd4:	7f3a      	ldrb	r2, [r7, #28]
 8000bd6:	7f7b      	ldrb	r3, [r7, #29]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0e9      	beq.n	8000bb4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	200d      	movs	r0, #13
 8000be4:	f7ff ff31 	bl	8000a4a <ClearBitMask>

    if (i != 0)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d052      	beq.n	8000c94 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f7ff fee8 	bl	80009c4 <Read_MFRC522>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 031b 	and.w	r3, r3, #27
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d148      	bne.n	8000c90 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000c02:	7f3a      	ldrb	r2, [r7, #28]
 8000c04:	7fbb      	ldrb	r3, [r7, #30]
 8000c06:	4013      	ands	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	2b0c      	cmp	r3, #12
 8000c1a:	d13b      	bne.n	8000c94 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f7ff fed1 	bl	80009c4 <Read_MFRC522>
 8000c22:	4603      	mov	r3, r0
 8000c24:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000c26:	200c      	movs	r0, #12
 8000c28:	f7ff fecc 	bl	80009c4 <Read_MFRC522>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d008      	beq.n	8000c4c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000c3a:	7f3b      	ldrb	r3, [r7, #28]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	00da      	lsls	r2, r3, #3
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
 8000c42:	4413      	add	r3, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e004      	b.n	8000c56 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000c4c:	7f3b      	ldrb	r3, [r7, #28]
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	461a      	mov	r2, r3
 8000c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c54:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000c56:	7f3b      	ldrb	r3, [r7, #28]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000c60:	7f3b      	ldrb	r3, [r7, #28]
 8000c62:	2b10      	cmp	r3, #16
 8000c64:	d901      	bls.n	8000c6a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000c66:	2310      	movs	r3, #16
 8000c68:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	e00a      	b.n	8000c86 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	18d4      	adds	r4, r2, r3
 8000c76:	2009      	movs	r0, #9
 8000c78:	f7ff fea4 	bl	80009c4 <Read_MFRC522>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	7f3b      	ldrb	r3, [r7, #28]
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d3f0      	bcc.n	8000c70 <MFRC522_ToCard+0x164>
 8000c8e:	e001      	b.n	8000c94 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000c90:	2302      	movs	r3, #2
 8000c92:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd90      	pop	{r4, r7, pc}

08000c9e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af02      	add	r7, sp, #8
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	6039      	str	r1, [r7, #0]
 8000ca8:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000caa:	2107      	movs	r1, #7
 8000cac:	200d      	movs	r0, #13
 8000cae:	f7ff fe63 	bl	8000978 <Write_MFRC522>

	TagType[0] = reqMode;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	6839      	ldr	r1, [r7, #0]
 8000cc4:	200c      	movs	r0, #12
 8000cc6:	f7ff ff21 	bl	8000b0c <MFRC522_ToCard>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <MFRC522_Request+0x3c>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d001      	beq.n	8000cde <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200d      	movs	r0, #13
 8000cf8:	f7ff fe3e 	bl	8000978 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2293      	movs	r2, #147	; 0x93
 8000d00:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	2220      	movs	r2, #32
 8000d08:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2202      	movs	r2, #2
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	200c      	movs	r0, #12
 8000d18:	f7ff fef8 	bl	8000b0c <MFRC522_ToCard>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	73bb      	strb	r3, [r7, #14]
 8000d2a:	e009      	b.n	8000d40 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	7b7b      	ldrb	r3, [r7, #13]
 8000d36:	4053      	eors	r3, r2
 8000d38:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000d3a:	7bbb      	ldrb	r3, [r7, #14]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73bb      	strb	r3, [r7, #14]
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d9f2      	bls.n	8000d2c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	7b7a      	ldrb	r2, [r7, #13]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d001      	beq.n	8000d58 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000d54:	2302      	movs	r3, #2
 8000d56:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MX_SPI2_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000db0:	220a      	movs	r2, #10
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_SPI2_Init+0x64>)
 8000db6:	f002 f997 	bl	80030e8 <HAL_SPI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dc0:	f7ff fdbf 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000032c 	.word	0x2000032c
 8000dcc:	40003800 	.word	0x40003800

08000dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <HAL_SPI_MspInit+0xf0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d162      	bne.n	8000eb8 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2b      	ldr	r2, [pc, #172]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <HAL_SPI_MspInit+0xf4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <HAL_SPI_MspInit+0xf8>)
 8000e62:	f001 f929 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e66:	2304      	movs	r3, #4
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e76:	2305      	movs	r3, #5
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <HAL_SPI_MspInit+0xf8>)
 8000e82:	f001 f919 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <HAL_SPI_MspInit+0xfc>)
 8000ea4:	f001 f908 	bl	80020b8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2105      	movs	r1, #5
 8000eac:	2024      	movs	r0, #36	; 0x24
 8000eae:	f000 fcd7 	bl	8001860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000eb2:	2024      	movs	r0, #36	; 0x24
 8000eb4:	f000 fcf0 	bl	8001898 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40003800 	.word	0x40003800
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x54>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_MspInit+0x54>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x54>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_MspInit+0x54>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_MspInit+0x54>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_MspInit+0x54>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	210f      	movs	r1, #15
 8000f12:	f06f 0001 	mvn.w	r0, #1
 8000f16:	f000 fca3 	bl	8001860 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_InitTick+0xe8>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a33      	ldr	r2, [pc, #204]	; (8001010 <HAL_InitTick+0xe8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <HAL_InitTick+0xe8>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f54:	f107 0210 	add.w	r2, r7, #16
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fbc2 	bl	80026e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d103      	bne.n	8000f76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f6e:	f001 fb93 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8000f72:	6378      	str	r0, [r7, #52]	; 0x34
 8000f74:	e004      	b.n	8000f80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f76:	f001 fb8f 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f82:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_InitTick+0xec>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	0c9b      	lsrs	r3, r3, #18
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_InitTick+0xf0>)
 8000f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_InitTick+0xf0>)
 8000f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <HAL_InitTick+0xf0>)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_InitTick+0xf0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_InitTick+0xf0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_InitTick+0xf0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <HAL_InitTick+0xf0>)
 8000fb8:	f002 fcbe 	bl	8003938 <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11b      	bne.n	8001002 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <HAL_InitTick+0xf0>)
 8000fcc:	f002 fd0e 	bl	80039ec <HAL_TIM_Base_Start_IT>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d111      	bne.n	8001002 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f000 fc5a 	bl	8001898 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	d808      	bhi.n	8000ffc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000fea:	2200      	movs	r2, #0
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 fc36 	bl	8001860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_InitTick+0xf4>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e002      	b.n	8001002 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001006:	4618      	mov	r0, r3
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	431bde83 	.word	0x431bde83
 8001018:	20000384 	.word	0x20000384
 800101c:	20000004 	.word	0x20000004

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f002 fd3b 	bl	8003acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000384 	.word	0x20000384

08001060 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <SPI2_IRQHandler+0x10>)
 8001066:	f002 fa79 	bl	800355c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000032c 	.word	0x2000032c

08001074 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART1_IRQHandler+0x10>)
 800107a:	f002 ffff 	bl	800407c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000099c 	.word	0x2000099c

08001088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USART3_IRQHandler+0x10>)
 800108e:	f002 fff5 	bl	800407c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000a2c 	.word	0x20000a2c

0800109c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA2_Stream5_IRQHandler+0x10>)
 80010a2:	f000 fd9f 	bl	8001be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000a74 	.word	0x20000a74

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <uart_init>:
extern osThreadId tagNumTransmitTHandle;
extern osThreadId defaultTaskHandle;

queue8_t uart_queue;

void uart_init(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	4906      	ldr	r1, [pc, #24]	; (80010f8 <uart_init+0x24>)
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <uart_init+0x28>)
 80010e0:	f002 ffa7 	bl	8004032 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <uart_init+0x24>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	uart_queue.q_out_index = 0;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <uart_init+0x24>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200003cc 	.word	0x200003cc
 80010fc:	2000099c 	.word	0x2000099c

08001100 <uart_available>:

uint32_t uart_available(void){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <uart_available+0x50>)
 800110c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <uart_available+0x54>)
 8001120:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <uart_available+0x54>)
 8001126:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800112a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800112e:	4a09      	ldr	r2, [pc, #36]	; (8001154 <uart_available+0x54>)
 8001130:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	425a      	negs	r2, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	bf58      	it	pl
 800113e:	4253      	negpl	r3, r2
 8001140:	607b      	str	r3, [r7, #4]

	return ret;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	2000099c 	.word	0x2000099c
 8001154:	200003cc 	.word	0x200003cc

08001158 <uart_q8_read>:

uint8_t uart_q8_read(void){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <uart_q8_read+0x50>)
 8001164:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <uart_q8_read+0x50>)
 800116a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800116e:	429a      	cmp	r2, r3
 8001170:	d013      	beq.n	800119a <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <uart_q8_read+0x50>)
 8001174:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001178:	461a      	mov	r2, r3
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <uart_q8_read+0x50>)
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <uart_q8_read+0x50>)
 8001182:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001186:	3301      	adds	r3, #1
 8001188:	425a      	negs	r2, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	bf58      	it	pl
 8001190:	4253      	negpl	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <uart_q8_read+0x50>)
 8001196:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	}

	return ret;
 800119a:	79fb      	ldrb	r3, [r7, #7]
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200003cc 	.word	0x200003cc

080011ac <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 80011b2:	f7ff ffa5 	bl	8001100 <uart_available>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d047      	beq.n	800124c <read_rfid_number+0xa0>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 80011bc:	f7ff ffcc 	bl	8001158 <uart_q8_read>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <read_rfid_number+0xa8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	b2d1      	uxtb	r1, r2
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <read_rfid_number+0xa8>)
 80011ce:	7011      	strb	r1, [r2, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <read_rfid_number+0xac>)
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	2b7e      	cmp	r3, #126	; 0x7e
 80011dc:	d126      	bne.n	800122c <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <read_rfid_number+0xac>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d01f      	beq.n	8001226 <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 80011e6:	2308      	movs	r3, #8
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	e013      	b.n	8001214 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <read_rfid_number+0xb0>)
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	4610      	mov	r0, r2
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	3a08      	subs	r2, #8
 80011f8:	4917      	ldr	r1, [pc, #92]	; (8001258 <read_rfid_number+0xac>)
 80011fa:	5ccc      	ldrb	r4, [r1, r3]
 80011fc:	4918      	ldr	r1, [pc, #96]	; (8001260 <read_rfid_number+0xb4>)
 80011fe:	4603      	mov	r3, r0
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4403      	add	r3, r0
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	4413      	add	r3, r2
 800120a:	4622      	mov	r2, r4
 800120c:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3301      	adds	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b13      	cmp	r3, #19
 8001218:	d9e8      	bls.n	80011ec <read_rfid_number+0x40>
				book_num ++;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <read_rfid_number+0xb0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <read_rfid_number+0xb0>)
 8001224:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <read_rfid_number+0xa8>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 800122c:	f7ff ff68 	bl	8001100 <uart_available>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10a      	bne.n	800124c <read_rfid_number+0xa0>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <read_rfid_number+0xb8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f004 f8a1 	bl	8005384 <osSignalSet>
			vTaskSuspend(defaultTaskHandle);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <read_rfid_number+0xbc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f004 fbba 	bl	80059c0 <vTaskSuspend>
			}
		}
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	20000999 	.word	0x20000999
 8001258:	20000980 	.word	0x20000980
 800125c:	20000998 	.word	0x20000998
 8001260:	200004d0 	.word	0x200004d0
 8001264:	20000084 	.word	0x20000084
 8001268:	2000007c 	.word	0x2000007c

0800126c <transmitData>:

void transmitData(){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	int i=0;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 8001276:	e01c      	b.n	80012b2 <transmitData+0x46>
		//computer
		HAL_UART_Transmit(&huart2, rfid_number[i], sizeof(rfid_number[i]), 500);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <transmitData+0x74>)
 8001284:	1899      	adds	r1, r3, r2
 8001286:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128a:	220c      	movs	r2, #12
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <transmitData+0x78>)
 800128e:	f002 fe45 	bl	8003f1c <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, rfid_number[i], sizeof(rfid_number[i]), 500);
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <transmitData+0x74>)
 800129e:	1899      	adds	r1, r3, r2
 80012a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a4:	220c      	movs	r2, #12
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <transmitData+0x7c>)
 80012a8:	f002 fe38 	bl	8003f1c <HAL_UART_Transmit>
		i++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
	while(rfid_number[i][0] != 0){
 80012b2:	490b      	ldr	r1, [pc, #44]	; (80012e0 <transmitData+0x74>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1d8      	bne.n	8001278 <transmitData+0xc>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 80012c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012ca:	2100      	movs	r1, #0
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <transmitData+0x74>)
 80012ce:	f005 fe45 	bl	8006f5c <memset>
	book_num =0;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <transmitData+0x80>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004d0 	.word	0x200004d0
 80012e4:	200009e4 	.word	0x200009e4
 80012e8:	20000a2c 	.word	0x20000a2c
 80012ec:	20000998 	.word	0x20000998

080012f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f002 fda8 	bl	8003e7c <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f7ff fb06 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000099c 	.word	0x2000099c
 8001340:	40011000 	.word	0x40011000

08001344 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f002 fd7e 	bl	8003e7c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f7ff fadc 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200009e4 	.word	0x200009e4
 8001394:	40004400 	.word	0x40004400

08001398 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART3_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART3_UART_Init+0x4c>)
 80013d0:	f002 fd54 	bl	8003e7c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f7ff fab2 	bl	8000942 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000a2c 	.word	0x20000a2c
 80013e8:	40004800 	.word	0x40004800

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_UART_MspInit+0x208>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d164      	bne.n	80014d8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a78      	ldr	r2, [pc, #480]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a71      	ldr	r2, [pc, #452]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001446:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4866      	ldr	r0, [pc, #408]	; (80015fc <HAL_UART_MspInit+0x210>)
 8001464:	f000 fe28 	bl	80020b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001468:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_UART_MspInit+0x214>)
 800146a:	4a66      	ldr	r2, [pc, #408]	; (8001604 <HAL_UART_MspInit+0x218>)
 800146c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800146e:	4b64      	ldr	r3, [pc, #400]	; (8001600 <HAL_UART_MspInit+0x214>)
 8001470:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001474:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_UART_MspInit+0x214>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147c:	4b60      	ldr	r3, [pc, #384]	; (8001600 <HAL_UART_MspInit+0x214>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_UART_MspInit+0x214>)
 8001484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001488:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_UART_MspInit+0x214>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <HAL_UART_MspInit+0x214>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001496:	4b5a      	ldr	r3, [pc, #360]	; (8001600 <HAL_UART_MspInit+0x214>)
 8001498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_UART_MspInit+0x214>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a4:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_UART_MspInit+0x214>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014aa:	4855      	ldr	r0, [pc, #340]	; (8001600 <HAL_UART_MspInit+0x214>)
 80014ac:	f000 fa02 	bl	80018b4 <HAL_DMA_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014b6:	f7ff fa44 	bl	8000942 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a50      	ldr	r2, [pc, #320]	; (8001600 <HAL_UART_MspInit+0x214>)
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c0:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <HAL_UART_MspInit+0x214>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2105      	movs	r1, #5
 80014ca:	2025      	movs	r0, #37	; 0x25
 80014cc:	f000 f9c8 	bl	8001860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d0:	2025      	movs	r0, #37	; 0x25
 80014d2:	f000 f9e1 	bl	8001898 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d6:	e089      	b.n	80015ec <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <HAL_UART_MspInit+0x21c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12c      	bne.n	800153c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a43      	ldr	r2, [pc, #268]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800151a:	230c      	movs	r3, #12
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152a:	2307      	movs	r3, #7
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4831      	ldr	r0, [pc, #196]	; (80015fc <HAL_UART_MspInit+0x210>)
 8001536:	f000 fdbf 	bl	80020b8 <HAL_GPIO_Init>
}
 800153a:	e057      	b.n	80015ec <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a32      	ldr	r2, [pc, #200]	; (800160c <HAL_UART_MspInit+0x220>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d152      	bne.n	80015ec <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_UART_MspInit+0x20c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800159a:	2320      	movs	r3, #32
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015aa:	2307      	movs	r3, #7
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4816      	ldr	r0, [pc, #88]	; (8001610 <HAL_UART_MspInit+0x224>)
 80015b6:	f000 fd7f 	bl	80020b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015cc:	2307      	movs	r3, #7
 80015ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_UART_MspInit+0x228>)
 80015d8:	f000 fd6e 	bl	80020b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2105      	movs	r1, #5
 80015e0:	2027      	movs	r0, #39	; 0x27
 80015e2:	f000 f93d 	bl	8001860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015e6:	2027      	movs	r0, #39	; 0x27
 80015e8:	f000 f956 	bl	8001898 <HAL_NVIC_EnableIRQ>
}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000a74 	.word	0x20000a74
 8001604:	40026488 	.word	0x40026488
 8001608:	40004400 	.word	0x40004400
 800160c:	40004800 	.word	0x40004800
 8001610:	40020800 	.word	0x40020800
 8001614:	40020400 	.word	0x40020400

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800161c:	f7ff fd48 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	; (8001664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001646:	f005 fce7 	bl	8007018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff f8dd 	bl	8000808 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800165c:	08007214 	.word	0x08007214
  ldr r2, =_sbss
 8001660:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001664:	2000496c 	.word	0x2000496c

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f8d8 	bl	800184a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f7ff fc44 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fc16 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000ad4 	.word	0x20000ad4

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000ad4 	.word	0x20000ad4

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff4c 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001872:	f7ff ff61 	bl	8001738 <__NVIC_GetPriorityGrouping>
 8001876:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	6978      	ldr	r0, [r7, #20]
 800187e:	f7ff ffb1 	bl	80017e4 <NVIC_EncodePriority>
 8001882:	4602      	mov	r2, r0
 8001884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff80 	bl	8001790 <__NVIC_SetPriority>
}
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff54 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ff0a 	bl	80016d8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e099      	b.n	8001a04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f0:	e00f      	b.n	8001912 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f2:	f7ff fef1 	bl	80016d8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d908      	bls.n	8001912 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2203      	movs	r2, #3
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e078      	b.n	8001a04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e8      	bne.n	80018f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_DMA_Init+0x158>)
 800192c:	4013      	ands	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800193e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2b04      	cmp	r3, #4
 800196a:	d107      	bne.n	800197c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4313      	orrs	r3, r2
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0307 	bic.w	r3, r3, #7
 8001992:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d117      	bne.n	80019d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00e      	beq.n	80019d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fb01 	bl	8001fc0 <DMA_CheckFifoParam>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019d2:	2301      	movs	r3, #1
 80019d4:	e016      	b.n	8001a04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fab8 	bl	8001f54 <DMA_CalcBaseAndBitshift>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	223f      	movs	r2, #63	; 0x3f
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	f010803f 	.word	0xf010803f

08001a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Start_IT+0x26>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e040      	b.n	8001ab8 <HAL_DMA_Start_IT+0xa8>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d12f      	bne.n	8001aaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fa4a 	bl	8001ef8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	223f      	movs	r2, #63	; 0x3f
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0216 	orr.w	r2, r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0208 	orr.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e005      	b.n	8001ab6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ace:	f7ff fe03 	bl	80016d8 <HAL_GetTick>
 8001ad2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e052      	b.n	8001b98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0216 	bic.w	r2, r2, #22
 8001b00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_DMA_Abort+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0208 	bic.w	r2, r2, #8
 8001b30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	e013      	b.n	8001b6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b44:	f7ff fdc8 	bl	80016d8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d90c      	bls.n	8001b6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2220      	movs	r2, #32
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e015      	b.n	8001b98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e4      	bne.n	8001b44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	223f      	movs	r2, #63	; 0x3f
 8001b80:	409a      	lsls	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d004      	beq.n	8001bbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00c      	b.n	8001bd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2205      	movs	r2, #5
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf0:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_DMA_IRQHandler+0x248>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	; (8001e30 <HAL_DMA_IRQHandler+0x24c>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2208      	movs	r2, #8
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0204 	bic.w	r2, r2, #4
 8001c36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2201      	movs	r2, #1
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f043 0202 	orr.w	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2204      	movs	r2, #4
 8001caa:	409a      	lsls	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0204 	orr.w	r2, r3, #4
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d043      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d03c      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2210      	movs	r2, #16
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d108      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d024      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
 8001d12:	e01f      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e016      	b.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0208 	bic.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2220      	movs	r2, #32
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 808f 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8087 	beq.w	8001e84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d136      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_IRQHandler+0x1da>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	223f      	movs	r2, #63	; 0x3f
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d07e      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
        }
        return;
 8001dfa:	e079      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01d      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d031      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
 8001e28:	e02c      	b.n	8001e84 <HAL_DMA_IRQHandler+0x2a0>
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
 8001e44:	e01e      	b.n	8001e84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10f      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0210 	bic.w	r2, r2, #16
 8001e62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d032      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2205      	movs	r2, #5
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d307      	bcc.n	8001ecc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f2      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x2cc>
 8001eca:	e000      	b.n	8001ece <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ecc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
 8001eee:	e000      	b.n	8001ef2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ef0:	bf00      	nop
    }
  }
}
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d108      	bne.n	8001f38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f36:	e007      	b.n	8001f48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b10      	subs	r3, #16
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <DMA_CalcBaseAndBitshift+0x68>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d909      	bls.n	8001f96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	e007      	b.n	8001fa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	aaaaaaab 	.word	0xaaaaaaab
 8001fbc:	080071fc 	.word	0x080071fc

08001fc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11f      	bne.n	800201a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d856      	bhi.n	800208e <DMA_CheckFifoParam+0xce>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x28>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	0800200b 	.word	0x0800200b
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	0800208f 	.word	0x0800208f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d046      	beq.n	8002092 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e043      	b.n	8002092 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002012:	d140      	bne.n	8002096 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e03d      	b.n	8002096 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d121      	bne.n	8002068 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d837      	bhi.n	800209a <DMA_CheckFifoParam+0xda>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <DMA_CheckFifoParam+0x70>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002047 	.word	0x08002047
 8002038:	08002041 	.word	0x08002041
 800203c:	08002059 	.word	0x08002059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e030      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d025      	beq.n	800209e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002056:	e022      	b.n	800209e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002060:	d11f      	bne.n	80020a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002066:	e01c      	b.n	80020a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d903      	bls.n	8002076 <DMA_CheckFifoParam+0xb6>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002074:	e018      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
      break;
 800207a:	e015      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00e      	beq.n	80020a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      break;
 800208c:	e00b      	b.n	80020a6 <DMA_CheckFifoParam+0xe6>
      break;
 800208e:	bf00      	nop
 8002090:	e00a      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e008      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e006      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e004      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e002      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
    }
  } 
  
  return status; 
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e165      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8154 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b03      	cmp	r3, #3
 8002176:	d017      	beq.n	80021a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80ae 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b5a      	ldr	r3, [pc, #360]	; (80023b8 <HAL_GPIO_Init+0x300>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_GPIO_Init+0x304>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x308>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d025      	beq.n	80022d2 <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x30c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01f      	beq.n	80022ce <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x310>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x314>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x318>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x20a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_GPIO_Init+0x31c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x206>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a49      	ldr	r2, [pc, #292]	; (80023d8 <HAL_GPIO_Init+0x320>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x202>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00c      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00a      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022be:	2305      	movs	r3, #5
 80022c0:	e008      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e006      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022c6:	2303      	movs	r3, #3
 80022c8:	e004      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e002      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x21c>
 80022d2:	2300      	movs	r3, #0
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f002 0203 	and.w	r2, r2, #3
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	4093      	lsls	r3, r2
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e4:	4935      	ldr	r1, [pc, #212]	; (80023bc <HAL_GPIO_Init+0x304>)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_GPIO_Init+0x324>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002316:	4a31      	ldr	r2, [pc, #196]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_GPIO_Init+0x324>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236a:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_GPIO_Init+0x324>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	f67f ae96 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020c00 	.word	0x40020c00
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40021400 	.word	0x40021400
 80023d8:	40021800 	.word	0x40021800
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff f94a 	bl	80016d8 <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7ff f946 	bl	80016d8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e01f      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_PWREx_EnableOverDrive+0x98>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002470:	f7ff f932 	bl	80016d8 <HAL_GetTick>
 8002474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002476:	e009      	b.n	800248c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002478:	f7ff f92e 	bl	80016d8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002486:	d901      	bls.n	800248c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e007      	b.n	800249c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_PWREx_EnableOverDrive+0x98>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002498:	d1ee      	bne.n	8002478 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	420e0040 	.word	0x420e0040
 80024ac:	40007000 	.word	0x40007000
 80024b0:	420e0044 	.word	0x420e0044

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff f898 	bl	80016d8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7ff f894 	bl	80016d8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f887 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fc64 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	080071e4 	.word	0x080071e4
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	080071f4 	.word	0x080071f4

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	080071f4 	.word	0x080071f4

080026e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	220f      	movs	r2, #15
 80026f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_GetClockConfig+0x5c>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_RCC_GetClockConfig+0x5c>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_RCC_GetClockConfig+0x5c>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_GetClockConfig+0x5c>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_RCC_GetClockConfig+0x60>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b0ae      	sub	sp, #184	; 0xb8
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002772:	4bcb      	ldr	r3, [pc, #812]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b0c      	cmp	r3, #12
 800277c:	f200 8206 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x440>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027bd 	.word	0x080027bd
 800278c:	08002b8d 	.word	0x08002b8d
 8002790:	08002b8d 	.word	0x08002b8d
 8002794:	08002b8d 	.word	0x08002b8d
 8002798:	080027c5 	.word	0x080027c5
 800279c:	08002b8d 	.word	0x08002b8d
 80027a0:	08002b8d 	.word	0x08002b8d
 80027a4:	08002b8d 	.word	0x08002b8d
 80027a8:	080027cd 	.word	0x080027cd
 80027ac:	08002b8d 	.word	0x08002b8d
 80027b0:	08002b8d 	.word	0x08002b8d
 80027b4:	08002b8d 	.word	0x08002b8d
 80027b8:	080029bd 	.word	0x080029bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4bb9      	ldr	r3, [pc, #740]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x358>)
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027c2:	e1e7      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c4:	4bb8      	ldr	r3, [pc, #736]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027ca:	e1e3      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4bb4      	ldr	r3, [pc, #720]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d8:	4bb1      	ldr	r3, [pc, #708]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d071      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e4:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	099b      	lsrs	r3, r3, #6
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800280a:	4622      	mov	r2, r4
 800280c:	462b      	mov	r3, r5
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4621      	mov	r1, r4
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	6439      	str	r1, [r7, #64]	; 0x40
 8002828:	4629      	mov	r1, r5
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800283c:	4649      	mov	r1, r9
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4641      	mov	r1, r8
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4641      	mov	r1, r8
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4641      	mov	r1, r8
 800284c:	1a51      	subs	r1, r2, r1
 800284e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002850:	4649      	mov	r1, r9
 8002852:	eb63 0301 	sbc.w	r3, r3, r1
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002864:	4649      	mov	r1, r9
 8002866:	00cb      	lsls	r3, r1, #3
 8002868:	4641      	mov	r1, r8
 800286a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800286e:	4641      	mov	r1, r8
 8002870:	00ca      	lsls	r2, r1, #3
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	4603      	mov	r3, r0
 8002878:	4622      	mov	r2, r4
 800287a:	189b      	adds	r3, r3, r2
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
 800287e:	462b      	mov	r3, r5
 8002880:	460a      	mov	r2, r1
 8002882:	eb42 0303 	adc.w	r3, r2, r3
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002894:	4629      	mov	r1, r5
 8002896:	024b      	lsls	r3, r1, #9
 8002898:	4621      	mov	r1, r4
 800289a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800289e:	4621      	mov	r1, r4
 80028a0:	024a      	lsls	r2, r1, #9
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028b8:	f7fd fcaa 	bl	8000210 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c6:	e067      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028e2:	2300      	movs	r3, #0
 80028e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	62b9      	str	r1, [r7, #40]	; 0x28
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800291c:	4649      	mov	r1, r9
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4641      	mov	r1, r8
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4641      	mov	r1, r8
 800292c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002930:	4649      	mov	r1, r9
 8002932:	eb63 0b01 	sbc.w	fp, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002942:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294a:	4692      	mov	sl, r2
 800294c:	469b      	mov	fp, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb1a 0303 	adds.w	r3, sl, r3
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	462b      	mov	r3, r5
 8002958:	eb4b 0303 	adc.w	r3, fp, r3
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002980:	2200      	movs	r2, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
 8002984:	677a      	str	r2, [r7, #116]	; 0x74
 8002986:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800298a:	f7fd fc41 	bl	8000210 <__aeabi_uldivmod>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4613      	mov	r3, r2
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ba:	e0eb      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d06b      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	2200      	movs	r2, #0
 80029dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80029de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	663b      	str	r3, [r7, #96]	; 0x60
 80029e8:	2300      	movs	r3, #0
 80029ea:	667b      	str	r3, [r7, #100]	; 0x64
 80029ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029f0:	4622      	mov	r2, r4
 80029f2:	462b      	mov	r3, r5
 80029f4:	f04f 0000 	mov.w	r0, #0
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	0159      	lsls	r1, r3, #5
 80029fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a02:	0150      	lsls	r0, r2, #5
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4621      	mov	r1, r4
 8002a0a:	1a51      	subs	r1, r2, r1
 8002a0c:	61b9      	str	r1, [r7, #24]
 8002a0e:	4629      	mov	r1, r5
 8002a10:	eb63 0301 	sbc.w	r3, r3, r1
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a22:	4659      	mov	r1, fp
 8002a24:	018b      	lsls	r3, r1, #6
 8002a26:	4651      	mov	r1, sl
 8002a28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2c:	4651      	mov	r1, sl
 8002a2e:	018a      	lsls	r2, r1, #6
 8002a30:	4651      	mov	r1, sl
 8002a32:	ebb2 0801 	subs.w	r8, r2, r1
 8002a36:	4659      	mov	r1, fp
 8002a38:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a50:	4690      	mov	r8, r2
 8002a52:	4699      	mov	r9, r3
 8002a54:	4623      	mov	r3, r4
 8002a56:	eb18 0303 	adds.w	r3, r8, r3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a70:	4629      	mov	r1, r5
 8002a72:	024b      	lsls	r3, r1, #9
 8002a74:	4621      	mov	r1, r4
 8002a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	024a      	lsls	r2, r1, #9
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a86:	2200      	movs	r2, #0
 8002a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a90:	f7fd fbbe 	bl	8000210 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a9e:	e065      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x420>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
 8002abe:	2300      	movs	r3, #0
 8002ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ac2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	464b      	mov	r3, r9
 8002aca:	f04f 0000 	mov.w	r0, #0
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	0159      	lsls	r1, r3, #5
 8002ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad8:	0150      	lsls	r0, r2, #5
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4641      	mov	r1, r8
 8002ae0:	1a51      	subs	r1, r2, r1
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002af8:	4659      	mov	r1, fp
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b02:	4651      	mov	r1, sl
 8002b04:	018a      	lsls	r2, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	1a54      	subs	r4, r2, r1
 8002b0a:	4659      	mov	r1, fp
 8002b0c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	00eb      	lsls	r3, r5, #3
 8002b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1e:	00e2      	lsls	r2, r4, #3
 8002b20:	4614      	mov	r4, r2
 8002b22:	461d      	mov	r5, r3
 8002b24:	4643      	mov	r3, r8
 8002b26:	18e3      	adds	r3, r4, r3
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	eb45 0303 	adc.w	r3, r5, r3
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b3e:	4629      	mov	r1, r5
 8002b40:	028b      	lsls	r3, r1, #10
 8002b42:	4621      	mov	r1, r4
 8002b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b48:	4621      	mov	r1, r4
 8002b4a:	028a      	lsls	r2, r1, #10
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b54:	2200      	movs	r2, #0
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b5e:	f7fd fb57 	bl	8000210 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4613      	mov	r3, r2
 8002b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0f1b      	lsrs	r3, r3, #28
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	37b8      	adds	r7, #184	; 0xb8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400

08002bac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e28d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8083 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bcc:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d019      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bd8:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002be4:	4b8e      	ldr	r3, [pc, #568]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b84      	ldr	r3, [pc, #528]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x124>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e25a      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x90>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0xb4>
 8002c46:	4b76      	ldr	r3, [pc, #472]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a75      	ldr	r2, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xcc>
 8002c60:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6c      	ldr	r3, [pc, #432]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6b      	ldr	r2, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fd2a 	bl	80016d8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fd26 	bl	80016d8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e21f      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xdc>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fd16 	bl	80016d8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fd12 	bl	80016d8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e20b      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x104>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d06f      	beq.n	8002dbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cde:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d017      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cea:	4b4d      	ldr	r3, [pc, #308]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cf6:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0e:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1d3      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4937      	ldr	r1, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e03a      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fcbf 	bl	80016d8 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fcbb 	bl	80016d8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1b4      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4925      	ldr	r1, [pc, #148]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
 8002d90:	e015      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x278>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fc9e 	bl	80016d8 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe fc9a 	bl	80016d8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e193      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fc7e 	bl	80016d8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de0:	f7fe fc7a 	bl	80016d8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e173      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x234>
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x27c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe fc67 	bl	80016d8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	e00e      	b.n	8002e2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe fc63 	bl	80016d8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d907      	bls.n	8002e2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e15c      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8002e20:	40023800 	.word	0x40023800
 8002e24:	42470000 	.word	0x42470000
 8002e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ea      	bne.n	8002e0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8097 	beq.w	8002f74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b83      	ldr	r3, [pc, #524]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e76:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e82:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fc23 	bl	80016d8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7fe fc1f 	bl	80016d8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e118      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x4b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x31e>
 8002ebc:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x340>
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0x358>
 8002eec:	4b5a      	ldr	r3, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a59      	ldr	r2, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 0304 	bic.w	r3, r3, #4
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fbe4 	bl	80016d8 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe fbe0 	bl	80016d8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0d7      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ee      	beq.n	8002f14 <HAL_RCC_OscConfig+0x368>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fbce 	bl	80016d8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe fbca 	bl	80016d8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0c1      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ee      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80ad 	beq.w	80030d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d060      	beq.n	800304c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d145      	bne.n	800301e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb9e 	bl	80016d8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fb9a 	bl	80016d8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e093      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fb6f 	bl	80016d8 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fb6b 	bl	80016d8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e064      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x452>
 800301c:	e05c      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4b4>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fb58 	bl	80016d8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fb54 	bl	80016d8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04d      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x480>
 800304a:	e045      	b.n	80030d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e040      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
 8003060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_RCC_OscConfig+0x538>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d030      	beq.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d129      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d122      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	4293      	cmp	r3, r2
 800309e:	d119      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	3b01      	subs	r3, #1
 80030ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10f      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07b      	b.n	80031f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d108      	bne.n	8003114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310a:	d009      	beq.n	8003120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
 8003112:	e005      	b.n	8003120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fe48 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	ea42 0103 	orr.w	r1, r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0104 	and.w	r1, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0210 	and.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08c      	sub	sp, #48	; 0x30
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x26>
 800321c:	2302      	movs	r3, #2
 800321e:	e198      	b.n	8003552 <HAL_SPI_TransmitReceive+0x358>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003228:	f7fe fa56 	bl	80016d8 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003246:	2b01      	cmp	r3, #1
 8003248:	d00f      	beq.n	800326a <HAL_SPI_TransmitReceive+0x70>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003250:	d107      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x68>
 800325a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003268:	e16d      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_SPI_TransmitReceive+0x82>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_TransmitReceive+0x82>
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003282:	e160      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b04      	cmp	r3, #4
 800328e:	d003      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2205      	movs	r2, #5
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d007      	beq.n	80032ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f4:	d17c      	bne.n	80033f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x10a>
 80032fe:	8b7b      	ldrh	r3, [r7, #26]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d16a      	bne.n	80033da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003328:	e057      	b.n	80033da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d11b      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x176>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x176>
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d113      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d119      	bne.n	80033b2 <HAL_SPI_TransmitReceive+0x1b8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	b292      	uxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	1c9a      	adds	r2, r3, #2
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b2:	f7fe f991 	bl	80016d8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033be:	429a      	cmp	r2, r3
 80033c0:	d80b      	bhi.n	80033da <HAL_SPI_TransmitReceive+0x1e0>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d007      	beq.n	80033da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80033d8:	e0b5      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1a2      	bne.n	800332a <HAL_SPI_TransmitReceive+0x130>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d19d      	bne.n	800332a <HAL_SPI_TransmitReceive+0x130>
 80033ee:	e080      	b.n	80034f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x204>
 80033f8:	8b7b      	ldrh	r3, [r7, #26]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d16f      	bne.n	80034de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003424:	e05b      	b.n	80034de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d11c      	bne.n	800346e <HAL_SPI_TransmitReceive+0x274>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <HAL_SPI_TransmitReceive+0x274>
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d114      	bne.n	800346e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d119      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x2b6>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034b0:	f7fe f912 	bl	80016d8 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034bc:	429a      	cmp	r2, r3
 80034be:	d803      	bhi.n	80034c8 <HAL_SPI_TransmitReceive+0x2ce>
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d102      	bne.n	80034ce <HAL_SPI_TransmitReceive+0x2d4>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034dc:	e033      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d19e      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x22c>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d199      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f9ca 	bl	8003890 <SPI_EndRxTxTransaction>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800350e:	e01a      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353c:	e003      	b.n	8003546 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800354e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003552:	4618      	mov	r0, r3
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10e      	bne.n	800359c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
    return;
 800359a:	e0ce      	b.n	800373a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_SPI_IRQHandler+0x5e>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
    return;
 80035b8:	e0bf      	b.n	800373a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_SPI_IRQHandler+0x7e>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80b0 	beq.w	800373a <HAL_SPI_IRQHandler+0x1de>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80aa 	beq.w	800373a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d023      	beq.n	8003638 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d011      	beq.n	8003620 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	e00b      	b.n	8003638 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
        return;
 8003636:	e080      	b.n	800373a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d014      	beq.n	800366c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	d04f      	beq.n	8003738 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_SPI_IRQHandler+0x168>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d034      	beq.n	800372e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0203 	bic.w	r2, r2, #3
 80036d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_SPI_IRQHandler+0x1e4>)
 80036e2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fa59 	bl	8001ba0 <HAL_DMA_Abort_IT>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_SPI_IRQHandler+0x1e4>)
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fa43 	bl	8001ba0 <HAL_DMA_Abort_IT>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800372c:	e003      	b.n	8003736 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f808 	bl	8003744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003734:	e000      	b.n	8003738 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003736:	bf00      	nop
    return;
 8003738:	bf00      	nop
  }
}
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08003759 	.word	0x08003759

08003744 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ffe6 	bl	8003744 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003790:	f7fd ffa2 	bl	80016d8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037a0:	f7fd ff9a 	bl	80016d8 <HAL_GetTick>
 80037a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	0d1b      	lsrs	r3, r3, #20
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b6:	e054      	b.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d050      	beq.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037c0:	f7fd ff8a 	bl	80016d8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d902      	bls.n	80037d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d13d      	bne.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ee:	d111      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d004      	beq.n	8003804 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d107      	bne.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003812:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381c:	d10f      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e017      	b.n	8003882 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	3b01      	subs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	429a      	cmp	r2, r3
 800387e:	d19b      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000

08003890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2102      	movs	r1, #2
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff ff6a 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e032      	b.n	8003928 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <SPI_EndRxTxTransaction+0xa0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <SPI_EndRxTxTransaction+0xa4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0d5b      	lsrs	r3, r3, #21
 80038ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e0:	d112      	bne.n	8003908 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff47 	bl	8003780 <SPI_WaitFlagStateUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d016      	beq.n	8003926 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e00f      	b.n	8003928 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3b01      	subs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d0f2      	beq.n	8003908 <SPI_EndRxTxTransaction+0x78>
 8003922:	e000      	b.n	8003926 <SPI_EndRxTxTransaction+0x96>
        break;
 8003924:	bf00      	nop
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000000 	.word	0x20000000
 8003934:	165e9f81 	.word	0x165e9f81

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e041      	b.n	80039ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f839 	bl	80039d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 f9c0 	bl	8003cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e04e      	b.n	8003aa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d022      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d01d      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d018      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_TIM_Base_Start_IT+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x80>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d111      	bne.n	8003a90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d010      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	e007      	b.n	8003aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40010400 	.word	0x40010400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40001800 	.word	0x40001800

08003acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d020      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0202 	mvn.w	r2, #2
 8003b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8d2 	bl	8003cc0 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8c4 	bl	8003cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f8d5 	bl	8003cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d020      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0204 	mvn.w	r2, #4
 8003b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8ac 	bl	8003cc0 <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f89e 	bl	8003cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8af 	bl	8003cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01b      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0208 	mvn.w	r2, #8
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f886 	bl	8003cc0 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f878 	bl	8003cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f889 	bl	8003cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0210 	mvn.w	r2, #16
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2208      	movs	r2, #8
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f860 	bl	8003cc0 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f852 	bl	8003cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f863 	bl	8003cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0201 	mvn.w	r2, #1
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc fe76 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f906 	bl	8003e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f834 	bl	8003ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0220 	mvn.w	r2, #32
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8d8 	bl	8003e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <TIM_Base_SetConfig+0x12c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d00f      	beq.n	8003d3c <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a43      	ldr	r2, [pc, #268]	; (8003e2c <TIM_Base_SetConfig+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00b      	beq.n	8003d3c <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a42      	ldr	r2, [pc, #264]	; (8003e30 <TIM_Base_SetConfig+0x134>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d007      	beq.n	8003d3c <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <TIM_Base_SetConfig+0x138>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <TIM_Base_SetConfig+0x13c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d108      	bne.n	8003d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <TIM_Base_SetConfig+0x12c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d02b      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d027      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a32      	ldr	r2, [pc, #200]	; (8003e2c <TIM_Base_SetConfig+0x130>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d023      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a31      	ldr	r2, [pc, #196]	; (8003e30 <TIM_Base_SetConfig+0x134>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <TIM_Base_SetConfig+0x138>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01b      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0x13c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d017      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <TIM_Base_SetConfig+0x140>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2d      	ldr	r2, [pc, #180]	; (8003e40 <TIM_Base_SetConfig+0x144>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00f      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2c      	ldr	r2, [pc, #176]	; (8003e44 <TIM_Base_SetConfig+0x148>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00b      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <TIM_Base_SetConfig+0x14c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <TIM_Base_SetConfig+0x150>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d003      	beq.n	8003dae <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0x154>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <TIM_Base_SetConfig+0x12c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0xf8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <TIM_Base_SetConfig+0x13c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d103      	bne.n	8003dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	40001800 	.word	0x40001800
 8003e4c:	40001c00 	.word	0x40001c00
 8003e50:	40002000 	.word	0x40002000

08003e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd faa2 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 ff59 	bl	8004d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d175      	bne.n	8004028 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Transmit+0x2c>
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e06e      	b.n	800402a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2221      	movs	r2, #33	; 0x21
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fbbd 	bl	80016d8 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d108      	bne.n	8003f88 <HAL_UART_Transmit+0x6c>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e003      	b.n	8003f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f90:	e02e      	b.n	8003ff0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fc31 	bl	8004804 <UART_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e03a      	b.n	800402a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e007      	b.n	8003fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1cb      	bne.n	8003f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2200      	movs	r2, #0
 8004002:	2140      	movs	r1, #64	; 0x40
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fbfd 	bl	8004804 <UART_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e006      	b.n	800402a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b20      	cmp	r3, #32
 800404a:	d112      	bne.n	8004072 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_UART_Receive_DMA+0x26>
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e00b      	b.n	8004074 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	461a      	mov	r2, r3
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fc25 	bl	80048b8 <UART_Start_Receive_DMA>
 800406e:	4603      	mov	r3, r0
 8004070:	e000      	b.n	8004074 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
  }
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b0ba      	sub	sp, #232	; 0xe8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_UART_IRQHandler+0x66>
 80040ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fd8d 	bl	8004bfa <UART_Receive_IT>
      return;
 80040e0:	e25b      	b.n	800459a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80de 	beq.w	80042a8 <HAL_UART_IRQHandler+0x22c>
 80040ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80d1 	beq.w	80042a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xae>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_UART_IRQHandler+0xd2>
 8004136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_UART_IRQHandler+0xf6>
 800415a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f043 0204 	orr.w	r2, r3, #4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d011      	beq.n	80041a2 <HAL_UART_IRQHandler+0x126>
 800417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	f043 0208 	orr.w	r2, r3, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 81f2 	beq.w	8004590 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_UART_IRQHandler+0x14e>
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fd18 	bl	8004bfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_UART_IRQHandler+0x17a>
 80041ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04f      	beq.n	8004296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fc20 	bl	8004a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b40      	cmp	r3, #64	; 0x40
 8004208:	d141      	bne.n	800428e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800423a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800424e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1d9      	bne.n	800420a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	4a7e      	ldr	r2, [pc, #504]	; (800445c <HAL_UART_IRQHandler+0x3e0>)
 8004264:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fc98 	bl	8001ba0 <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00e      	b.n	80042a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9a8 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e00a      	b.n	80042a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9a4 	bl	80045dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e006      	b.n	80042a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9a0 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042a2:	e175      	b.n	8004590 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	bf00      	nop
    return;
 80042a6:	e173      	b.n	8004590 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 814f 	bne.w	8004550 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8148 	beq.w	8004550 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8141 	beq.w	8004550 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	f040 80b6 	bne.w	8004460 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8145 	beq.w	8004594 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800430e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004312:	429a      	cmp	r2, r3
 8004314:	f080 813e 	bcs.w	8004594 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800431e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432a:	f000 8088 	beq.w	800443e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800435a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800435e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004362:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004366:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1d9      	bne.n	800432e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800438a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800439e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e1      	bne.n	800437a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3314      	adds	r3, #20
 80043bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3314      	adds	r3, #20
 80043d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e3      	bne.n	80043b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800440c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440e:	f023 0310 	bic.w	r3, r3, #16
 8004412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004420:	65ba      	str	r2, [r7, #88]	; 0x58
 8004422:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004428:	e841 2300 	strex	r3, r2, [r1]
 800442c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e3      	bne.n	80043fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fb41 	bl	8001ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444c:	b29b      	uxth	r3, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	b29b      	uxth	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f8cb 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800445a:	e09b      	b.n	8004594 <HAL_UART_IRQHandler+0x518>
 800445c:	08004b03 	.word	0x08004b03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004468:	b29b      	uxth	r3, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 808e 	beq.w	8004598 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800447c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8089 	beq.w	8004598 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044aa:	647a      	str	r2, [r7, #68]	; 0x44
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e3      	bne.n	8004486 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	623b      	str	r3, [r7, #32]
   return(result);
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044e2:	633a      	str	r2, [r7, #48]	; 0x30
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e3      	bne.n	80044be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60fb      	str	r3, [r7, #12]
   return(result);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004528:	61fa      	str	r2, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	69b9      	ldr	r1, [r7, #24]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	617b      	str	r3, [r7, #20]
   return(result);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f851 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800454e:	e023      	b.n	8004598 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_UART_IRQHandler+0x4f4>
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fade 	bl	8004b2a <UART_Transmit_IT>
    return;
 800456e:	e014      	b.n	800459a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <HAL_UART_IRQHandler+0x51e>
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb1e 	bl	8004bca <UART_EndTransmit_IT>
    return;
 800458e:	e004      	b.n	800459a <HAL_UART_IRQHandler+0x51e>
    return;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <HAL_UART_IRQHandler+0x51e>
      return;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HAL_UART_IRQHandler+0x51e>
      return;
 8004598:	bf00      	nop
  }
}
 800459a:	37e8      	adds	r7, #232	; 0xe8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b09c      	sub	sp, #112	; 0x70
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d172      	bne.n	800470a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	2200      	movs	r2, #0
 8004628:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800463a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800464a:	65ba      	str	r2, [r7, #88]	; 0x58
 800464c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	667b      	str	r3, [r7, #100]	; 0x64
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800467e:	647a      	str	r2, [r7, #68]	; 0x44
 8004680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	623b      	str	r3, [r7, #32]
   return(result);
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a8:	663b      	str	r3, [r7, #96]	; 0x60
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046b2:	633a      	str	r2, [r7, #48]	; 0x30
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d119      	bne.n	800470a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046f6:	61fa      	str	r2, [r7, #28]
 80046f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	617b      	str	r3, [r7, #20]
   return(result);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	2200      	movs	r2, #0
 800470e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471c:	4619      	mov	r1, r3
 800471e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004720:	f7ff ff66 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004724:	e002      	b.n	800472c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004726:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004728:	f7ff ff44 	bl	80045b4 <HAL_UART_RxCpltCallback>
}
 800472c:	bf00      	nop
 800472e:	3770      	adds	r7, #112	; 0x70
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d108      	bne.n	8004762 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff ff48 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004760:	e002      	b.n	8004768 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff30 	bl	80045c8 <HAL_UART_RxHalfCpltCallback>
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b21      	cmp	r3, #33	; 0x21
 80047a2:	d108      	bne.n	80047b6 <UART_DMAError+0x46>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2200      	movs	r2, #0
 80047ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f000 f91b 	bl	80049ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b22      	cmp	r3, #34	; 0x22
 80047d6:	d108      	bne.n	80047ea <UART_DMAError+0x7a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f000 f929 	bl	8004a3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f7ff fef0 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004814:	e03b      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d037      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fc ff5b 	bl	80016d8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <UART_WaitOnFlagUntilTimeout+0x30>
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e03a      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d023      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d020      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b40      	cmp	r3, #64	; 0x40
 8004850:	d01d      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d116      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f8e0 	bl	8004a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2208      	movs	r2, #8
 8004880:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e00f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d0b4      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b098      	sub	sp, #96	; 0x60
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2222      	movs	r2, #34	; 0x22
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	4a3e      	ldr	r2, [pc, #248]	; (80049e0 <UART_Start_Receive_DMA+0x128>)
 80048e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	4a3d      	ldr	r2, [pc, #244]	; (80049e4 <UART_Start_Receive_DMA+0x12c>)
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	4a3c      	ldr	r2, [pc, #240]	; (80049e8 <UART_Start_Receive_DMA+0x130>)
 80048f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	2200      	movs	r2, #0
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	f7fd f87a 	bl	8001a10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	65bb      	str	r3, [r7, #88]	; 0x58
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800495a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	657b      	str	r3, [r7, #84]	; 0x54
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800498e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	617b      	str	r3, [r7, #20]
   return(result);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b8:	653b      	str	r3, [r7, #80]	; 0x50
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049c2:	627a      	str	r2, [r7, #36]	; 0x24
 80049c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6a39      	ldr	r1, [r7, #32]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3760      	adds	r7, #96	; 0x60
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	08004609 	.word	0x08004609
 80049e4:	08004735 	.word	0x08004735
 80049e8:	08004771 	.word	0x08004771

080049ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	61ba      	str	r2, [r7, #24]
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6979      	ldr	r1, [r7, #20]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	613b      	str	r3, [r7, #16]
   return(result);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004a30:	bf00      	nop
 8004a32:	3724      	adds	r7, #36	; 0x24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b095      	sub	sp, #84	; 0x54
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a64:	643a      	str	r2, [r7, #64]	; 0x40
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d119      	bne.n	8004ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	647b      	str	r3, [r7, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad4:	61ba      	str	r2, [r7, #24]
 8004ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6979      	ldr	r1, [r7, #20]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004af6:	bf00      	nop
 8004af8:	3754      	adds	r7, #84	; 0x54
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fd5d 	bl	80045dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b21      	cmp	r3, #33	; 0x21
 8004b3c:	d13e      	bne.n	8004bbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	d114      	bne.n	8004b72 <UART_Transmit_IT+0x48>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d110      	bne.n	8004b72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	1c9a      	adds	r2, r3, #2
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	621a      	str	r2, [r3, #32]
 8004b70:	e008      	b.n	8004b84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6211      	str	r1, [r2, #32]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4619      	mov	r1, r3
 8004b92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fcd8 	bl	80045a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b08c      	sub	sp, #48	; 0x30
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b22      	cmp	r3, #34	; 0x22
 8004c0c:	f040 80ae 	bne.w	8004d6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d117      	bne.n	8004c4a <UART_Receive_IT+0x50>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d113      	bne.n	8004c4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
 8004c48:	e026      	b.n	8004c98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d007      	beq.n	8004c6e <UART_Receive_IT+0x74>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <UART_Receive_IT+0x82>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e008      	b.n	8004c8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d15d      	bne.n	8004d68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0220 	bic.w	r2, r2, #32
 8004cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d135      	bne.n	8004d5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	613b      	str	r3, [r7, #16]
   return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d18:	623a      	str	r2, [r7, #32]
 8004d1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	69f9      	ldr	r1, [r7, #28]
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d10a      	bne.n	8004d50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fc4a 	bl	80045f0 <HAL_UARTEx_RxEventCallback>
 8004d5c:	e002      	b.n	8004d64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fc28 	bl	80045b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e002      	b.n	8004d6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3730      	adds	r7, #48	; 0x30
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d7c:	b0c0      	sub	sp, #256	; 0x100
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	68d9      	ldr	r1, [r3, #12]
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	ea40 0301 	orr.w	r3, r0, r1
 8004da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dd0:	f021 010c 	bic.w	r1, r1, #12
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dde:	430b      	orrs	r3, r1
 8004de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	6999      	ldr	r1, [r3, #24]
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	ea40 0301 	orr.w	r3, r0, r1
 8004dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b8f      	ldr	r3, [pc, #572]	; (8005044 <UART_SetConfig+0x2cc>)
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d005      	beq.n	8004e18 <UART_SetConfig+0xa0>
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b8d      	ldr	r3, [pc, #564]	; (8005048 <UART_SetConfig+0x2d0>)
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d104      	bne.n	8004e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e18:	f7fd fc52 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8004e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e20:	e003      	b.n	8004e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e22:	f7fd fc39 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8004e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e34:	f040 810c 	bne.w	8005050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e52:	415b      	adcs	r3, r3
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	eb12 0801 	adds.w	r8, r2, r1
 8004e60:	4629      	mov	r1, r5
 8004e62:	eb43 0901 	adc.w	r9, r3, r1
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e7a:	4690      	mov	r8, r2
 8004e7c:	4699      	mov	r9, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	eb18 0303 	adds.w	r3, r8, r3
 8004e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e88:	462b      	mov	r3, r5
 8004e8a:	eb49 0303 	adc.w	r3, r9, r3
 8004e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	18db      	adds	r3, r3, r3
 8004eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8004eac:	4613      	mov	r3, r2
 8004eae:	eb42 0303 	adc.w	r3, r2, r3
 8004eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ebc:	f7fb f9a8 	bl	8000210 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4b61      	ldr	r3, [pc, #388]	; (800504c <UART_SetConfig+0x2d4>)
 8004ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	011c      	lsls	r4, r3, #4
 8004ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f10:	4692      	mov	sl, r2
 8004f12:	469b      	mov	fp, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	eb1a 0303 	adds.w	r3, sl, r3
 8004f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	eb4b 0303 	adc.w	r3, fp, r3
 8004f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	18db      	adds	r3, r3, r3
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
 8004f42:	4613      	mov	r3, r2
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f52:	f7fb f95d 	bl	8000210 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4b3b      	ldr	r3, [pc, #236]	; (800504c <UART_SetConfig+0x2d4>)
 8004f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2264      	movs	r2, #100	; 0x64
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	1acb      	subs	r3, r1, r3
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f72:	4b36      	ldr	r3, [pc, #216]	; (800504c <UART_SetConfig+0x2d4>)
 8004f74:	fba3 2302 	umull	r2, r3, r3, r2
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f80:	441c      	add	r4, r3
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	1891      	adds	r1, r2, r2
 8004f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f9c:	415b      	adcs	r3, r3
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	1851      	adds	r1, r2, r1
 8004fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8004faa:	4649      	mov	r1, r9
 8004fac:	414b      	adcs	r3, r1
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	00cb      	lsls	r3, r1, #3
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc6:	4651      	mov	r1, sl
 8004fc8:	00ca      	lsls	r2, r1, #3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	189b      	adds	r3, r3, r2
 8004fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fd8:	464b      	mov	r3, r9
 8004fda:	460a      	mov	r2, r1
 8004fdc:	eb42 0303 	adc.w	r3, r2, r3
 8004fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	18db      	adds	r3, r3, r3
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	4613      	mov	r3, r2
 8005000:	eb42 0303 	adc.w	r3, r2, r3
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800500a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800500e:	f7fb f8ff 	bl	8000210 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <UART_SetConfig+0x2d4>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	; 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	3332      	adds	r3, #50	; 0x32
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <UART_SetConfig+0x2d4>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 0207 	and.w	r2, r3, #7
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4422      	add	r2, r4
 800503e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005040:	e106      	b.n	8005250 <UART_SetConfig+0x4d8>
 8005042:	bf00      	nop
 8005044:	40011000 	.word	0x40011000
 8005048:	40011400 	.word	0x40011400
 800504c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800505a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800505e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005062:	4642      	mov	r2, r8
 8005064:	464b      	mov	r3, r9
 8005066:	1891      	adds	r1, r2, r2
 8005068:	6239      	str	r1, [r7, #32]
 800506a:	415b      	adcs	r3, r3
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
 800506e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005072:	4641      	mov	r1, r8
 8005074:	1854      	adds	r4, r2, r1
 8005076:	4649      	mov	r1, r9
 8005078:	eb43 0501 	adc.w	r5, r3, r1
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	00eb      	lsls	r3, r5, #3
 8005086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800508a:	00e2      	lsls	r2, r4, #3
 800508c:	4614      	mov	r4, r2
 800508e:	461d      	mov	r5, r3
 8005090:	4643      	mov	r3, r8
 8005092:	18e3      	adds	r3, r4, r3
 8005094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005098:	464b      	mov	r3, r9
 800509a:	eb45 0303 	adc.w	r3, r5, r3
 800509e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050be:	4629      	mov	r1, r5
 80050c0:	008b      	lsls	r3, r1, #2
 80050c2:	4621      	mov	r1, r4
 80050c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050c8:	4621      	mov	r1, r4
 80050ca:	008a      	lsls	r2, r1, #2
 80050cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050d0:	f7fb f89e 	bl	8000210 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4b60      	ldr	r3, [pc, #384]	; (800525c <UART_SetConfig+0x4e4>)
 80050da:	fba3 2302 	umull	r2, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	011c      	lsls	r4, r3, #4
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	1891      	adds	r1, r2, r2
 80050fa:	61b9      	str	r1, [r7, #24]
 80050fc:	415b      	adcs	r3, r3
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005104:	4641      	mov	r1, r8
 8005106:	1851      	adds	r1, r2, r1
 8005108:	6139      	str	r1, [r7, #16]
 800510a:	4649      	mov	r1, r9
 800510c:	414b      	adcs	r3, r1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800511c:	4659      	mov	r1, fp
 800511e:	00cb      	lsls	r3, r1, #3
 8005120:	4651      	mov	r1, sl
 8005122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005126:	4651      	mov	r1, sl
 8005128:	00ca      	lsls	r2, r1, #3
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	4603      	mov	r3, r0
 8005130:	4642      	mov	r2, r8
 8005132:	189b      	adds	r3, r3, r2
 8005134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005138:	464b      	mov	r3, r9
 800513a:	460a      	mov	r2, r1
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	67bb      	str	r3, [r7, #120]	; 0x78
 800514e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800515c:	4649      	mov	r1, r9
 800515e:	008b      	lsls	r3, r1, #2
 8005160:	4641      	mov	r1, r8
 8005162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005166:	4641      	mov	r1, r8
 8005168:	008a      	lsls	r2, r1, #2
 800516a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800516e:	f7fb f84f 	bl	8000210 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4611      	mov	r1, r2
 8005178:	4b38      	ldr	r3, [pc, #224]	; (800525c <UART_SetConfig+0x4e4>)
 800517a:	fba3 2301 	umull	r2, r3, r3, r1
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2264      	movs	r2, #100	; 0x64
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	1acb      	subs	r3, r1, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	3332      	adds	r3, #50	; 0x32
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <UART_SetConfig+0x4e4>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005198:	441c      	add	r4, r3
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	673b      	str	r3, [r7, #112]	; 0x70
 80051a2:	677a      	str	r2, [r7, #116]	; 0x74
 80051a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	1891      	adds	r1, r2, r2
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	415b      	adcs	r3, r3
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b8:	4641      	mov	r1, r8
 80051ba:	1851      	adds	r1, r2, r1
 80051bc:	6039      	str	r1, [r7, #0]
 80051be:	4649      	mov	r1, r9
 80051c0:	414b      	adcs	r3, r1
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051d0:	4659      	mov	r1, fp
 80051d2:	00cb      	lsls	r3, r1, #3
 80051d4:	4651      	mov	r1, sl
 80051d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051da:	4651      	mov	r1, sl
 80051dc:	00ca      	lsls	r2, r1, #3
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	4642      	mov	r2, r8
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ea:	464b      	mov	r3, r9
 80051ec:	460a      	mov	r2, r1
 80051ee:	eb42 0303 	adc.w	r3, r2, r3
 80051f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	663b      	str	r3, [r7, #96]	; 0x60
 80051fe:	667a      	str	r2, [r7, #100]	; 0x64
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800520c:	4649      	mov	r1, r9
 800520e:	008b      	lsls	r3, r1, #2
 8005210:	4641      	mov	r1, r8
 8005212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005216:	4641      	mov	r1, r8
 8005218:	008a      	lsls	r2, r1, #2
 800521a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800521e:	f7fa fff7 	bl	8000210 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <UART_SetConfig+0x4e4>)
 8005228:	fba3 1302 	umull	r1, r3, r3, r2
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	2164      	movs	r1, #100	; 0x64
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	3332      	adds	r3, #50	; 0x32
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <UART_SetConfig+0x4e4>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f003 020f 	and.w	r2, r3, #15
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4422      	add	r2, r4
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	bf00      	nop
 8005252:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005256:	46bd      	mov	sp, r7
 8005258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800525c:	51eb851f 	.word	0x51eb851f

08005260 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800526e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005272:	2b84      	cmp	r3, #132	; 0x84
 8005274:	d005      	beq.n	8005282 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005276:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	3303      	adds	r3, #3
 8005280:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005296:	f3ef 8305 	mrs	r3, IPSR
 800529a:	607b      	str	r3, [r7, #4]
  return(result);
 800529c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052b8:	f000 fca4 	bl	8005c04 <vTaskStartScheduler>
  
  return osOK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c4:	b089      	sub	sp, #36	; 0x24
 80052c6:	af04      	add	r7, sp, #16
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <osThreadCreate+0x54>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01c      	beq.n	8005316 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685c      	ldr	r4, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691e      	ldr	r6, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ffb6 	bl	8005260 <makeFreeRtosPriority>
 80052f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fe:	9202      	str	r2, [sp, #8]
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	9100      	str	r1, [sp, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	4632      	mov	r2, r6
 8005308:	4629      	mov	r1, r5
 800530a:	4620      	mov	r0, r4
 800530c:	f000 f97a 	bl	8005604 <xTaskCreateStatic>
 8005310:	4603      	mov	r3, r0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e01c      	b.n	8005350 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685c      	ldr	r4, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005322:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ff98 	bl	8005260 <makeFreeRtosPriority>
 8005330:	4602      	mov	r2, r0
 8005332:	f107 030c 	add.w	r3, r7, #12
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	9200      	str	r2, [sp, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	4632      	mov	r2, r6
 800533e:	4629      	mov	r1, r5
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f9bc 	bl	80056be <xTaskCreate>
 8005346:	4603      	mov	r3, r0
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800535a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <osDelay+0x16>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	e000      	b.n	8005372 <osDelay+0x18>
 8005370:	2301      	movs	r3, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f000 faf0 	bl	8005958 <vTaskDelay>
  
  return osOK;
 8005378:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8005396:	f7ff ff7b 	bl	8005290 <inHandlerMode>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01c      	beq.n	80053da <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	f107 0208 	add.w	r2, r7, #8
 80053a6:	f107 030c 	add.w	r3, r7, #12
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	2201      	movs	r2, #1
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 f84d 	bl	8006450 <xTaskGenericNotifyFromISR>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d002      	beq.n	80053c2 <osSignalSet+0x3e>
      return 0x80000000;
 80053bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053c0:	e019      	b.n	80053f6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <osSignalSet+0x70>
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <osSignalSet+0x7c>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	e00c      	b.n	80053f4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	2201      	movs	r2, #1
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 ff76 	bl	80062d4 <xTaskGenericNotify>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d002      	beq.n	80053f4 <osSignalSet+0x70>
    return 0x80000000;
 80053ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053f2:	e000      	b.n	80053f6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80053f4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d103      	bne.n	8005428 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	e009      	b.n	800543c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <osSignalWait+0x38>
      ticks = 1;
 8005438:	2301      	movs	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800543c:	f7ff ff28 	bl	8005290 <inHandlerMode>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8005446:	2382      	movs	r3, #130	; 0x82
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e01b      	b.n	8005484 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2000      	movs	r0, #0
 8005458:	f000 fedc 	bl	8006214 <xTaskNotifyWait>
 800545c:	4603      	mov	r3, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	d008      	beq.n	8005474 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <osSignalWait+0x6a>
 8005468:	2300      	movs	r3, #0
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	e00a      	b.n	8005484 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e007      	b.n	8005484 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	da02      	bge.n	8005480 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800547a:	2386      	movs	r3, #134	; 0x86
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e001      	b.n	8005484 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8005480:	2308      	movs	r3, #8
 8005482:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	461c      	mov	r4, r3
 8005488:	f107 0310 	add.w	r3, r7, #16
 800548c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	3724      	adds	r7, #36	; 0x24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0208 	add.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
 80054b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f103 0208 	add.w	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f103 0208 	add.w	r2, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d103      	bne.n	800555e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e00c      	b.n	8005578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3308      	adds	r3, #8
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <vListInsert+0x2e>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d2f6      	bcs.n	8005566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6892      	ldr	r2, [r2, #8]
 80055c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6852      	ldr	r2, [r2, #4]
 80055d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d103      	bne.n	80055e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1e5a      	subs	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08e      	sub	sp, #56	; 0x38
 8005608:	af04      	add	r7, sp, #16
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xTaskCreateStatic+0x46>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61fb      	str	r3, [r7, #28]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800564a:	23a0      	movs	r3, #160	; 0xa0
 800564c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2ba0      	cmp	r3, #160	; 0xa0
 8005652:	d00a      	beq.n	800566a <xTaskCreateStatic+0x66>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	61bb      	str	r3, [r7, #24]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800566a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01e      	beq.n	80056b0 <xTaskCreateStatic+0xac>
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01b      	beq.n	80056b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005680:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	2202      	movs	r2, #2
 8005686:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800568a:	2300      	movs	r3, #0
 800568c:	9303      	str	r3, [sp, #12]
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	9302      	str	r3, [sp, #8]
 8005692:	f107 0314 	add.w	r3, r7, #20
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f850 	bl	8005748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056aa:	f000 f8eb 	bl	8005884 <prvAddNewTaskToReadyList>
 80056ae:	e001      	b.n	80056b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056b4:	697b      	ldr	r3, [r7, #20]
	}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3728      	adds	r7, #40	; 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b08c      	sub	sp, #48	; 0x30
 80056c2:	af04      	add	r7, sp, #16
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f001 fa58 	bl	8006b88 <pvPortMalloc>
 80056d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056e0:	20a0      	movs	r0, #160	; 0xa0
 80056e2:	f001 fa51 	bl	8006b88 <pvPortMalloc>
 80056e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
 80056f4:	e005      	b.n	8005702 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f001 fb12 	bl	8006d20 <vPortFree>
 80056fc:	e001      	b.n	8005702 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d017      	beq.n	8005738 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	2300      	movs	r3, #0
 8005714:	9303      	str	r3, [sp, #12]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	9302      	str	r3, [sp, #8]
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f80e 	bl	8005748 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800572c:	69f8      	ldr	r0, [r7, #28]
 800572e:	f000 f8a9 	bl	8005884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005732:	2301      	movs	r3, #1
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e002      	b.n	800573e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800573e:	69bb      	ldr	r3, [r7, #24]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005760:	3b01      	subs	r3, #1
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <prvInitialiseNewTask+0x48>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	617b      	str	r3, [r7, #20]
}
 800578c:	bf00      	nop
 800578e:	e7fe      	b.n	800578e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01f      	beq.n	80057d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e012      	b.n	80057c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	7819      	ldrb	r1, [r3, #0]
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	3334      	adds	r3, #52	; 0x34
 80057ac:	460a      	mov	r2, r1
 80057ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d9e9      	bls.n	800579c <prvInitialiseNewTask+0x54>
 80057c8:	e000      	b.n	80057cc <prvInitialiseNewTask+0x84>
			{
				break;
 80057ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d4:	e003      	b.n	80057de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d901      	bls.n	80057e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057e4:	2306      	movs	r3, #6
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	2200      	movs	r2, #0
 80057f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	3304      	adds	r3, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fe6c 	bl	80054dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	3318      	adds	r3, #24
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe67 	bl	80054dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f1c3 0207 	rsb	r2, r3, #7
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	2200      	movs	r2, #0
 8005830:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	334c      	adds	r3, #76	; 0x4c
 8005838:	224c      	movs	r2, #76	; 0x4c
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fb8d 	bl	8006f5c <memset>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <prvInitialiseNewTask+0x130>)
 8005846:	651a      	str	r2, [r3, #80]	; 0x50
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	4a0c      	ldr	r2, [pc, #48]	; (800587c <prvInitialiseNewTask+0x134>)
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <prvInitialiseNewTask+0x138>)
 8005852:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	69b8      	ldr	r0, [r7, #24]
 800585a:	f000 ff43 	bl	80066e4 <pxPortInitialiseStack>
 800585e:	4602      	mov	r2, r0
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005870:	bf00      	nop
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	2000482c 	.word	0x2000482c
 800587c:	20004894 	.word	0x20004894
 8005880:	200048fc 	.word	0x200048fc

08005884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800588c:	f001 f85a 	bl	8006944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005890:	4b2a      	ldr	r3, [pc, #168]	; (800593c <prvAddNewTaskToReadyList+0xb8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	4a29      	ldr	r2, [pc, #164]	; (800593c <prvAddNewTaskToReadyList+0xb8>)
 8005898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <prvAddNewTaskToReadyList+0xbc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058a2:	4a27      	ldr	r2, [pc, #156]	; (8005940 <prvAddNewTaskToReadyList+0xbc>)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058a8:	4b24      	ldr	r3, [pc, #144]	; (800593c <prvAddNewTaskToReadyList+0xb8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d110      	bne.n	80058d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058b0:	f000 fbee 	bl	8006090 <prvInitialiseTaskLists>
 80058b4:	e00d      	b.n	80058d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <prvAddNewTaskToReadyList+0xc0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058be:	4b20      	ldr	r3, [pc, #128]	; (8005940 <prvAddNewTaskToReadyList+0xbc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d802      	bhi.n	80058d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058cc:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <prvAddNewTaskToReadyList+0xbc>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <prvAddNewTaskToReadyList+0xc4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3301      	adds	r3, #1
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <prvAddNewTaskToReadyList+0xc4>)
 80058da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	4b19      	ldr	r3, [pc, #100]	; (800594c <prvAddNewTaskToReadyList+0xc8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <prvAddNewTaskToReadyList+0xc8>)
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4a15      	ldr	r2, [pc, #84]	; (8005950 <prvAddNewTaskToReadyList+0xcc>)
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f7ff fdf6 	bl	80054f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800590a:	f001 f84b 	bl	80069a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <prvAddNewTaskToReadyList+0xc0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005916:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvAddNewTaskToReadyList+0xbc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	429a      	cmp	r2, r3
 8005922:	d207      	bcs.n	8005934 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <prvAddNewTaskToReadyList+0xd0>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000bd8 	.word	0x20000bd8
 8005940:	20000ad8 	.word	0x20000ad8
 8005944:	20000be4 	.word	0x20000be4
 8005948:	20000bf4 	.word	0x20000bf4
 800594c:	20000be0 	.word	0x20000be0
 8005950:	20000adc 	.word	0x20000adc
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <vTaskDelay+0x60>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <vTaskDelay+0x30>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60bb      	str	r3, [r7, #8]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005988:	f000 f9a6 	bl	8005cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fe42 	bl	8006618 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005994:	f000 f9ae 	bl	8005cf4 <xTaskResumeAll>
 8005998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <vTaskDelay+0x64>)
 80059a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000c00 	.word	0x20000c00
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80059c8:	f000 ffbc 	bl	8006944 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <vTaskSuspend+0x18>
 80059d2:	4b3c      	ldr	r3, [pc, #240]	; (8005ac4 <vTaskSuspend+0x104>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	e000      	b.n	80059da <vTaskSuspend+0x1a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3304      	adds	r3, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fde5 	bl	80055b0 <uxListRemove>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d115      	bne.n	8005a18 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4935      	ldr	r1, [pc, #212]	; (8005ac8 <vTaskSuspend+0x108>)
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <vTaskSuspend+0x58>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	2201      	movs	r2, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43da      	mvns	r2, r3
 8005a0e:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <vTaskSuspend+0x10c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4013      	ands	r3, r2
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <vTaskSuspend+0x10c>)
 8005a16:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3318      	adds	r3, #24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fdc3 	bl	80055b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4827      	ldr	r0, [pc, #156]	; (8005ad0 <vTaskSuspend+0x110>)
 8005a32:	f7ff fd60 	bl	80054f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d103      	bne.n	8005a4a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005a4a:	f000 ffab 	bl	80069a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005a4e:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <vTaskSuspend+0x114>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005a56:	f000 ff75 	bl	8006944 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005a5a:	f000 fbbb 	bl	80061d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005a5e:	f000 ffa1 	bl	80069a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <vTaskSuspend+0x104>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d127      	bne.n	8005abc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <vTaskSuspend+0x114>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005a74:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <vTaskSuspend+0x118>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <vTaskSuspend+0xd2>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60bb      	str	r3, [r7, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <vTaskSuspend+0x11c>)
 8005a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aa2:	e00b      	b.n	8005abc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <vTaskSuspend+0x110>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <vTaskSuspend+0x120>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d103      	bne.n	8005ab8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <vTaskSuspend+0x104>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	}
 8005ab6:	e001      	b.n	8005abc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005ab8:	f000 fa70 	bl	8005f9c <vTaskSwitchContext>
	}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000ad8 	.word	0x20000ad8
 8005ac8:	20000adc 	.word	0x20000adc
 8005acc:	20000be0 	.word	0x20000be0
 8005ad0:	20000bc4 	.word	0x20000bc4
 8005ad4:	20000be4 	.word	0x20000be4
 8005ad8:	20000c00 	.word	0x20000c00
 8005adc:	e000ed04 	.word	0xe000ed04
 8005ae0:	20000bd8 	.word	0x20000bd8

08005ae4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60fb      	str	r3, [r7, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <prvTaskIsTaskSuspended+0x5c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d10a      	bne.n	8005b30 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <prvTaskIsTaskSuspended+0x60>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d005      	beq.n	8005b30 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b30:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000bc4 	.word	0x20000bc4
 8005b44:	20000b98 	.word	0x20000b98

08005b48 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10a      	bne.n	8005b70 <vTaskResume+0x28>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	60bb      	str	r3, [r7, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005b70:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <vTaskResume+0xac>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d037      	beq.n	8005bea <vTaskResume+0xa2>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d034      	beq.n	8005bea <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005b80:	f000 fee0 	bl	8006944 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff ffad 	bl	8005ae4 <prvTaskIsTaskSuspended>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02a      	beq.n	8005be6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fd0b 	bl	80055b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	4b15      	ldr	r3, [pc, #84]	; (8005bf8 <vTaskResume+0xb0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <vTaskResume+0xb0>)
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <vTaskResume+0xb4>)
 8005bba:	441a      	add	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f7ff fc97 	bl	80054f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <vTaskResume+0xac>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d307      	bcc.n	8005be6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <vTaskResume+0xb8>)
 8005bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005be6:	f000 fedd 	bl	80069a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000ad8 	.word	0x20000ad8
 8005bf8:	20000be0 	.word	0x20000be0
 8005bfc:	20000adc 	.word	0x20000adc
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c12:	463a      	mov	r2, r7
 8005c14:	1d39      	adds	r1, r7, #4
 8005c16:	f107 0308 	add.w	r3, r7, #8
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fa fc96 	bl	800054c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	9202      	str	r2, [sp, #8]
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	460a      	mov	r2, r1
 8005c32:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <vTaskStartScheduler+0xb4>)
 8005c34:	4821      	ldr	r0, [pc, #132]	; (8005cbc <vTaskStartScheduler+0xb8>)
 8005c36:	f7ff fce5 	bl	8005604 <xTaskCreateStatic>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <vTaskStartScheduler+0xbc>)
 8005c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <vTaskStartScheduler+0xbc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e001      	b.n	8005c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d11b      	bne.n	8005c90 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	613b      	str	r3, [r7, #16]
}
 8005c6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c6c:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <vTaskStartScheduler+0xc0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	334c      	adds	r3, #76	; 0x4c
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <vTaskStartScheduler+0xc4>)
 8005c74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c76:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <vTaskStartScheduler+0xc8>)
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <vTaskStartScheduler+0xcc>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <vTaskStartScheduler+0xd0>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c8a:	f000 fdb9 	bl	8006800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c8e:	e00e      	b.n	8005cae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d10a      	bne.n	8005cae <vTaskStartScheduler+0xaa>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <vTaskStartScheduler+0xa8>
}
 8005cae:	bf00      	nop
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	080071dc 	.word	0x080071dc
 8005cbc:	08006061 	.word	0x08006061
 8005cc0:	20000bfc 	.word	0x20000bfc
 8005cc4:	20000ad8 	.word	0x20000ad8
 8005cc8:	2000005c 	.word	0x2000005c
 8005ccc:	20000bf8 	.word	0x20000bf8
 8005cd0:	20000be4 	.word	0x20000be4
 8005cd4:	20000bdc 	.word	0x20000bdc

08005cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cdc:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <vTaskSuspendAll+0x18>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	4a03      	ldr	r2, [pc, #12]	; (8005cf0 <vTaskSuspendAll+0x18>)
 8005ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	20000c00 	.word	0x20000c00

08005cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <xTaskResumeAll+0x114>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	603b      	str	r3, [r7, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d20:	f000 fe10 	bl	8006944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d24:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <xTaskResumeAll+0x114>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	4a37      	ldr	r2, [pc, #220]	; (8005e08 <xTaskResumeAll+0x114>)
 8005d2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d2e:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <xTaskResumeAll+0x114>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d161      	bne.n	8005dfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d36:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <xTaskResumeAll+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d05d      	beq.n	8005dfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d3e:	e02e      	b.n	8005d9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d40:	4b33      	ldr	r3, [pc, #204]	; (8005e10 <xTaskResumeAll+0x11c>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3318      	adds	r3, #24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fc2f 	bl	80055b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fc2a 	bl	80055b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	2201      	movs	r2, #1
 8005d62:	409a      	lsls	r2, r3
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <xTaskResumeAll+0x120>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <xTaskResumeAll+0x120>)
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <xTaskResumeAll+0x124>)
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f7ff fbb6 	bl	80054f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <xTaskResumeAll+0x128>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d302      	bcc.n	8005d9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d98:	4b21      	ldr	r3, [pc, #132]	; (8005e20 <xTaskResumeAll+0x12c>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d9e:	4b1c      	ldr	r3, [pc, #112]	; (8005e10 <xTaskResumeAll+0x11c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1cc      	bne.n	8005d40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dac:	f000 fa12 	bl	80061d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005db0:	4b1c      	ldr	r3, [pc, #112]	; (8005e24 <xTaskResumeAll+0x130>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dbc:	f000 f836 	bl	8005e2c <xTaskIncrementTick>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <xTaskResumeAll+0x12c>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f1      	bne.n	8005dbc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005dd8:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <xTaskResumeAll+0x130>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dde:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xTaskResumeAll+0x12c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dea:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <xTaskResumeAll+0x134>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dfa:	f000 fdd3 	bl	80069a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000c00 	.word	0x20000c00
 8005e0c:	20000bd8 	.word	0x20000bd8
 8005e10:	20000b98 	.word	0x20000b98
 8005e14:	20000be0 	.word	0x20000be0
 8005e18:	20000adc 	.word	0x20000adc
 8005e1c:	20000ad8 	.word	0x20000ad8
 8005e20:	20000bec 	.word	0x20000bec
 8005e24:	20000be8 	.word	0x20000be8
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e36:	4b4e      	ldr	r3, [pc, #312]	; (8005f70 <xTaskIncrementTick+0x144>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 808e 	bne.w	8005f5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e40:	4b4c      	ldr	r3, [pc, #304]	; (8005f74 <xTaskIncrementTick+0x148>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e48:	4a4a      	ldr	r2, [pc, #296]	; (8005f74 <xTaskIncrementTick+0x148>)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d120      	bne.n	8005e96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e54:	4b48      	ldr	r3, [pc, #288]	; (8005f78 <xTaskIncrementTick+0x14c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	603b      	str	r3, [r7, #0]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xTaskIncrementTick+0x46>
 8005e74:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <xTaskIncrementTick+0x14c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	4b40      	ldr	r3, [pc, #256]	; (8005f7c <xTaskIncrementTick+0x150>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a3e      	ldr	r2, [pc, #248]	; (8005f78 <xTaskIncrementTick+0x14c>)
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	4a3e      	ldr	r2, [pc, #248]	; (8005f7c <xTaskIncrementTick+0x150>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	4b3d      	ldr	r3, [pc, #244]	; (8005f80 <xTaskIncrementTick+0x154>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	4a3c      	ldr	r2, [pc, #240]	; (8005f80 <xTaskIncrementTick+0x154>)
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	f000 f99f 	bl	80061d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <xTaskIncrementTick+0x158>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d348      	bcc.n	8005f32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <xTaskIncrementTick+0x14c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <xTaskIncrementTick+0x158>)
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	601a      	str	r2, [r3, #0]
					break;
 8005eb2:	e03e      	b.n	8005f32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb4:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <xTaskIncrementTick+0x14c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d203      	bcs.n	8005ed4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <xTaskIncrementTick+0x158>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ed2:	e02e      	b.n	8005f32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fb69 	bl	80055b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3318      	adds	r3, #24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fb60 	bl	80055b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <xTaskIncrementTick+0x15c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	4a22      	ldr	r2, [pc, #136]	; (8005f88 <xTaskIncrementTick+0x15c>)
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <xTaskIncrementTick+0x160>)
 8005f10:	441a      	add	r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	3304      	adds	r3, #4
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f7ff faec 	bl	80054f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f22:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <xTaskIncrementTick+0x164>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d3b9      	bcc.n	8005ea0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f30:	e7b6      	b.n	8005ea0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f32:	4b17      	ldr	r3, [pc, #92]	; (8005f90 <xTaskIncrementTick+0x164>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4914      	ldr	r1, [pc, #80]	; (8005f8c <xTaskIncrementTick+0x160>)
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d901      	bls.n	8005f4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <xTaskIncrementTick+0x168>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e004      	b.n	8005f66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <xTaskIncrementTick+0x16c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <xTaskIncrementTick+0x16c>)
 8005f64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f66:	697b      	ldr	r3, [r7, #20]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000c00 	.word	0x20000c00
 8005f74:	20000bdc 	.word	0x20000bdc
 8005f78:	20000b90 	.word	0x20000b90
 8005f7c:	20000b94 	.word	0x20000b94
 8005f80:	20000bf0 	.word	0x20000bf0
 8005f84:	20000bf8 	.word	0x20000bf8
 8005f88:	20000be0 	.word	0x20000be0
 8005f8c:	20000adc 	.word	0x20000adc
 8005f90:	20000ad8 	.word	0x20000ad8
 8005f94:	20000bec 	.word	0x20000bec
 8005f98:	20000be8 	.word	0x20000be8

08005f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fa2:	4b29      	ldr	r3, [pc, #164]	; (8006048 <vTaskSwitchContext+0xac>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005faa:	4b28      	ldr	r3, [pc, #160]	; (800604c <vTaskSwitchContext+0xb0>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fb0:	e044      	b.n	800603c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <vTaskSwitchContext+0xb0>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <vTaskSwitchContext+0xb4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	f1c3 031f 	rsb	r3, r3, #31
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	4921      	ldr	r1, [pc, #132]	; (8006054 <vTaskSwitchContext+0xb8>)
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	607b      	str	r3, [r7, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <vTaskSwitchContext+0x5a>
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a14      	ldr	r2, [pc, #80]	; (8006054 <vTaskSwitchContext+0xb8>)
 8006004:	4413      	add	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3308      	adds	r3, #8
 800601a:	429a      	cmp	r2, r3
 800601c:	d104      	bne.n	8006028 <vTaskSwitchContext+0x8c>
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <vTaskSwitchContext+0xbc>)
 8006030:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <vTaskSwitchContext+0xbc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	334c      	adds	r3, #76	; 0x4c
 8006038:	4a08      	ldr	r2, [pc, #32]	; (800605c <vTaskSwitchContext+0xc0>)
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000c00 	.word	0x20000c00
 800604c:	20000bec 	.word	0x20000bec
 8006050:	20000be0 	.word	0x20000be0
 8006054:	20000adc 	.word	0x20000adc
 8006058:	20000ad8 	.word	0x20000ad8
 800605c:	2000005c 	.word	0x2000005c

08006060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006068:	f000 f852 	bl	8006110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <prvIdleTask+0x28>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d9f9      	bls.n	8006068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <prvIdleTask+0x2c>)
 8006076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006084:	e7f0      	b.n	8006068 <prvIdleTask+0x8>
 8006086:	bf00      	nop
 8006088:	20000adc 	.word	0x20000adc
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006096:	2300      	movs	r3, #0
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	e00c      	b.n	80060b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <prvInitialiseTaskLists+0x60>)
 80060a8:	4413      	add	r3, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff f9f6 	bl	800549c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3301      	adds	r3, #1
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b06      	cmp	r3, #6
 80060ba:	d9ef      	bls.n	800609c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060bc:	480d      	ldr	r0, [pc, #52]	; (80060f4 <prvInitialiseTaskLists+0x64>)
 80060be:	f7ff f9ed 	bl	800549c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060c2:	480d      	ldr	r0, [pc, #52]	; (80060f8 <prvInitialiseTaskLists+0x68>)
 80060c4:	f7ff f9ea 	bl	800549c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060c8:	480c      	ldr	r0, [pc, #48]	; (80060fc <prvInitialiseTaskLists+0x6c>)
 80060ca:	f7ff f9e7 	bl	800549c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060ce:	480c      	ldr	r0, [pc, #48]	; (8006100 <prvInitialiseTaskLists+0x70>)
 80060d0:	f7ff f9e4 	bl	800549c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060d4:	480b      	ldr	r0, [pc, #44]	; (8006104 <prvInitialiseTaskLists+0x74>)
 80060d6:	f7ff f9e1 	bl	800549c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <prvInitialiseTaskLists+0x78>)
 80060dc:	4a05      	ldr	r2, [pc, #20]	; (80060f4 <prvInitialiseTaskLists+0x64>)
 80060de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <prvInitialiseTaskLists+0x7c>)
 80060e2:	4a05      	ldr	r2, [pc, #20]	; (80060f8 <prvInitialiseTaskLists+0x68>)
 80060e4:	601a      	str	r2, [r3, #0]
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000adc 	.word	0x20000adc
 80060f4:	20000b68 	.word	0x20000b68
 80060f8:	20000b7c 	.word	0x20000b7c
 80060fc:	20000b98 	.word	0x20000b98
 8006100:	20000bac 	.word	0x20000bac
 8006104:	20000bc4 	.word	0x20000bc4
 8006108:	20000b90 	.word	0x20000b90
 800610c:	20000b94 	.word	0x20000b94

08006110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006116:	e019      	b.n	800614c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006118:	f000 fc14 	bl	8006944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800611c:	4b10      	ldr	r3, [pc, #64]	; (8006160 <prvCheckTasksWaitingTermination+0x50>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3304      	adds	r3, #4
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fa41 	bl	80055b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <prvCheckTasksWaitingTermination+0x54>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3b01      	subs	r3, #1
 8006134:	4a0b      	ldr	r2, [pc, #44]	; (8006164 <prvCheckTasksWaitingTermination+0x54>)
 8006136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <prvCheckTasksWaitingTermination+0x58>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <prvCheckTasksWaitingTermination+0x58>)
 8006140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006142:	f000 fc2f 	bl	80069a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f810 	bl	800616c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <prvCheckTasksWaitingTermination+0x58>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e1      	bne.n	8006118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000bac 	.word	0x20000bac
 8006164:	20000bd8 	.word	0x20000bd8
 8006168:	20000bc0 	.word	0x20000bc0

0800616c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	334c      	adds	r3, #76	; 0x4c
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fef7 	bl	8006f6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fdc7 	bl	8006d20 <vPortFree>
				vPortFree( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fdc4 	bl	8006d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006198:	e018      	b.n	80061cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d103      	bne.n	80061ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fdbb 	bl	8006d20 <vPortFree>
	}
 80061aa:	e00f      	b.n	80061cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d00a      	beq.n	80061cc <prvDeleteTCB+0x60>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <prvDeleteTCB+0x5e>
	}
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061da:	4b0c      	ldr	r3, [pc, #48]	; (800620c <prvResetNextTaskUnblockTime+0x38>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <prvResetNextTaskUnblockTime+0x3c>)
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061ec:	e008      	b.n	8006200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ee:	4b07      	ldr	r3, [pc, #28]	; (800620c <prvResetNextTaskUnblockTime+0x38>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a04      	ldr	r2, [pc, #16]	; (8006210 <prvResetNextTaskUnblockTime+0x3c>)
 80061fe:	6013      	str	r3, [r2, #0]
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000b90 	.word	0x20000b90
 8006210:	20000bf8 	.word	0x20000bf8

08006214 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006222:	f000 fb8f 	bl	8006944 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006226:	4b29      	ldr	r3, [pc, #164]	; (80062cc <xTaskNotifyWait+0xb8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d01c      	beq.n	800626e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <xTaskNotifyWait+0xb8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	43d2      	mvns	r2, r2
 8006240:	400a      	ands	r2, r1
 8006242:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <xTaskNotifyWait+0xb8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006256:	2101      	movs	r1, #1
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f000 f9dd 	bl	8006618 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800625e:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <xTaskNotifyWait+0xbc>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800626e:	f000 fb99 	bl	80069a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006272:	f000 fb67 	bl	8006944 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <xTaskNotifyWait+0xb8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006288:	4b10      	ldr	r3, [pc, #64]	; (80062cc <xTaskNotifyWait+0xb8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d002      	beq.n	800629c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	e00a      	b.n	80062b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800629c:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <xTaskNotifyWait+0xb8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	43d2      	mvns	r2, r2
 80062a8:	400a      	ands	r2, r1
 80062aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 80062ae:	2301      	movs	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <xTaskNotifyWait+0xb8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 80062bc:	f000 fb72 	bl	80069a4 <vPortExitCritical>

		return xReturn;
 80062c0:	697b      	ldr	r3, [r7, #20]
	}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000ad8 	.word	0x20000ad8
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <xTaskGenericNotify+0x30>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006308:	f000 fb1c 	bl	8006944 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d004      	beq.n	800631c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006322:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d82d      	bhi.n	800638e <xTaskGenericNotify+0xba>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <xTaskGenericNotify+0x64>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	080063b1 	.word	0x080063b1
 800633c:	0800634d 	.word	0x0800634d
 8006340:	0800635f 	.word	0x0800635f
 8006344:	0800636f 	.word	0x0800636f
 8006348:	08006379 	.word	0x08006379
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	431a      	orrs	r2, r3
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800635c:	e02b      	b.n	80063b6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800636c:	e023      	b.n	80063b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8006376:	e01e      	b.n	80063b6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006378:	7ffb      	ldrb	r3, [r7, #31]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d004      	beq.n	8006388 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006386:	e016      	b.n	80063b6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8006388:	2300      	movs	r3, #0
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800638c:	e013      	b.n	80063b6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d00c      	beq.n	80063b4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	617b      	str	r3, [r7, #20]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <xTaskGenericNotify+0xda>
					break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <xTaskGenericNotify+0xe2>

					break;
 80063b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063b6:	7ffb      	ldrb	r3, [r7, #31]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d139      	bne.n	8006430 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	3304      	adds	r3, #4
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f8f5 	bl	80055b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2201      	movs	r2, #1
 80063cc:	409a      	lsls	r2, r3
 80063ce:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <xTaskGenericNotify+0x16c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	4a1a      	ldr	r2, [pc, #104]	; (8006440 <xTaskGenericNotify+0x16c>)
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4a17      	ldr	r2, [pc, #92]	; (8006444 <xTaskGenericNotify+0x170>)
 80063e6:	441a      	add	r2, r3
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7ff f881 	bl	80054f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <xTaskGenericNotify+0x13e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	613b      	str	r3, [r7, #16]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <xTaskGenericNotify+0x174>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	429a      	cmp	r2, r3
 800641e:	d907      	bls.n	8006430 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <xTaskGenericNotify+0x178>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006430:	f000 fab8 	bl	80069a4 <vPortExitCritical>

		return xReturn;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006436:	4618      	mov	r0, r3
 8006438:	3728      	adds	r7, #40	; 0x28
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000be0 	.word	0x20000be0
 8006444:	20000adc 	.word	0x20000adc
 8006448:	20000ad8 	.word	0x20000ad8
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006460:	2301      	movs	r3, #1
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006480:	f000 fb42 	bl	8006b08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006488:	f3ef 8211 	mrs	r2, BASEPRI
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623a      	str	r2, [r7, #32]
 800649e:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064a0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d82f      	bhi.n	800652c <xTaskGenericNotifyFromISR+0xdc>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <xTaskGenericNotifyFromISR+0x84>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	0800654f 	.word	0x0800654f
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	080064fb 	.word	0x080064fb
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	08006515 	.word	0x08006515
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 80064f8:	e02c      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8006508:	e024      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8006512:	e01f      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006518:	2b02      	cmp	r3, #2
 800651a:	d004      	beq.n	8006526 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006524:	e016      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800652a:	e013      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d00c      	beq.n	8006552 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	61bb      	str	r3, [r7, #24]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <xTaskGenericNotifyFromISR+0x104>
					break;
 8006552:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006558:	2b01      	cmp	r3, #1
 800655a:	d145      	bne.n	80065e8 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	617b      	str	r3, [r7, #20]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800657a:	4b21      	ldr	r3, [pc, #132]	; (8006600 <xTaskGenericNotifyFromISR+0x1b0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11c      	bne.n	80065bc <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff f812 	bl	80055b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <xTaskGenericNotifyFromISR+0x1b4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <xTaskGenericNotifyFromISR+0x1b4>)
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <xTaskGenericNotifyFromISR+0x1b8>)
 80065ac:	441a      	add	r2, r3
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	3304      	adds	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe ff9e 	bl	80054f6 <vListInsertEnd>
 80065ba:	e005      	b.n	80065c8 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	3318      	adds	r3, #24
 80065c0:	4619      	mov	r1, r3
 80065c2:	4812      	ldr	r0, [pc, #72]	; (800660c <xTaskGenericNotifyFromISR+0x1bc>)
 80065c4:	f7fe ff97 	bl	80054f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <xTaskGenericNotifyFromISR+0x1c0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d908      	bls.n	80065e8 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80065d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80065e2:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <xTaskGenericNotifyFromISR+0x1c4>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065f2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3738      	adds	r7, #56	; 0x38
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000c00 	.word	0x20000c00
 8006604:	20000be0 	.word	0x20000be0
 8006608:	20000adc 	.word	0x20000adc
 800660c:	20000b98 	.word	0x20000b98
 8006610:	20000ad8 	.word	0x20000ad8
 8006614:	20000bec 	.word	0x20000bec

08006618 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006622:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006628:	4b28      	ldr	r3, [pc, #160]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe ffbe 	bl	80055b0 <uxListRemove>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800663a:	4b24      	ldr	r3, [pc, #144]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	2201      	movs	r2, #1
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43da      	mvns	r2, r3
 8006648:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4013      	ands	r3, r2
 800664e:	4a20      	ldr	r2, [pc, #128]	; (80066d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006650:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d10a      	bne.n	8006670 <prvAddCurrentTaskToDelayedList+0x58>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006660:	4b1a      	ldr	r3, [pc, #104]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	481a      	ldr	r0, [pc, #104]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800666a:	f7fe ff44 	bl	80054f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800666e:	e026      	b.n	80066be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006678:	4b14      	ldr	r3, [pc, #80]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	429a      	cmp	r2, r3
 8006686:	d209      	bcs.n	800669c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe ff52 	bl	800553e <vListInsert>
}
 800669a:	e010      	b.n	80066be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f7fe ff48 	bl	800553e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d202      	bcs.n	80066be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6013      	str	r3, [r2, #0]
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000bdc 	.word	0x20000bdc
 80066cc:	20000ad8 	.word	0x20000ad8
 80066d0:	20000be0 	.word	0x20000be0
 80066d4:	20000bc4 	.word	0x20000bc4
 80066d8:	20000b94 	.word	0x20000b94
 80066dc:	20000b90 	.word	0x20000b90
 80066e0:	20000bf8 	.word	0x20000bf8

080066e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3b04      	subs	r3, #4
 80066f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3b04      	subs	r3, #4
 8006702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b04      	subs	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006714:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <pxPortInitialiseStack+0x64>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3b14      	subs	r3, #20
 800671e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3b04      	subs	r3, #4
 800672a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f06f 0202 	mvn.w	r2, #2
 8006732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3b20      	subs	r3, #32
 8006738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800673a:	68fb      	ldr	r3, [r7, #12]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	0800674d 	.word	0x0800674d

0800674c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <prvTaskExitError+0x54>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d00a      	beq.n	8006776 <prvTaskExitError+0x2a>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <prvTaskExitError+0x28>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60bb      	str	r3, [r7, #8]
}
 8006788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800678a:	bf00      	nop
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0fc      	beq.n	800678c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	2000000c 	.word	0x2000000c
	...

080067b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <pxCurrentTCBConst2>)
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6808      	ldr	r0, [r1, #0]
 80067b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f380 8809 	msr	PSP, r0
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8811 	msr	BASEPRI, r0
 80067ca:	4770      	bx	lr
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst2>:
 80067d0:	20000ad8 	.word	0x20000ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067d8:	4808      	ldr	r0, [pc, #32]	; (80067fc <prvPortStartFirstTask+0x24>)
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	f380 8808 	msr	MSP, r0
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8814 	msr	CONTROL, r0
 80067ea:	b662      	cpsie	i
 80067ec:	b661      	cpsie	f
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	df00      	svc	0
 80067f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067fa:	bf00      	nop
 80067fc:	e000ed08 	.word	0xe000ed08

08006800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006806:	4b46      	ldr	r3, [pc, #280]	; (8006920 <xPortStartScheduler+0x120>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a46      	ldr	r2, [pc, #280]	; (8006924 <xPortStartScheduler+0x124>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10a      	bne.n	8006826 <xPortStartScheduler+0x26>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006826:	4b3e      	ldr	r3, [pc, #248]	; (8006920 <xPortStartScheduler+0x120>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a3f      	ldr	r2, [pc, #252]	; (8006928 <xPortStartScheduler+0x128>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10a      	bne.n	8006846 <xPortStartScheduler+0x46>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	60fb      	str	r3, [r7, #12]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <xPortStartScheduler+0x12c>)
 8006848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <xPortStartScheduler+0x130>)
 800686c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800686e:	4b31      	ldr	r3, [pc, #196]	; (8006934 <xPortStartScheduler+0x134>)
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006874:	e009      	b.n	800688a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006876:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <xPortStartScheduler+0x134>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3b01      	subs	r3, #1
 800687c:	4a2d      	ldr	r2, [pc, #180]	; (8006934 <xPortStartScheduler+0x134>)
 800687e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d0ef      	beq.n	8006876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006896:	4b27      	ldr	r3, [pc, #156]	; (8006934 <xPortStartScheduler+0x134>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1c3 0307 	rsb	r3, r3, #7
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00a      	beq.n	80068b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60bb      	str	r3, [r7, #8]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <xPortStartScheduler+0x134>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <xPortStartScheduler+0x134>)
 80068c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068c2:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <xPortStartScheduler+0x134>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ca:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <xPortStartScheduler+0x134>)
 80068cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <xPortStartScheduler+0x138>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <xPortStartScheduler+0x138>)
 80068dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <xPortStartScheduler+0x138>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <xPortStartScheduler+0x138>)
 80068e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ee:	f000 f8dd 	bl	8006aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <xPortStartScheduler+0x13c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068f8:	f000 f8fc 	bl	8006af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <xPortStartScheduler+0x140>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <xPortStartScheduler+0x140>)
 8006902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006908:	f7ff ff66 	bl	80067d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800690c:	f7ff fb46 	bl	8005f9c <vTaskSwitchContext>
	prvTaskExitError();
 8006910:	f7ff ff1c 	bl	800674c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	e000ed00 	.word	0xe000ed00
 8006924:	410fc271 	.word	0x410fc271
 8006928:	410fc270 	.word	0x410fc270
 800692c:	e000e400 	.word	0xe000e400
 8006930:	20000c04 	.word	0x20000c04
 8006934:	20000c08 	.word	0x20000c08
 8006938:	e000ed20 	.word	0xe000ed20
 800693c:	2000000c 	.word	0x2000000c
 8006940:	e000ef34 	.word	0xe000ef34

08006944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
}
 800695c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <vPortEnterCritical+0x58>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <vPortEnterCritical+0x58>)
 8006966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <vPortEnterCritical+0x58>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10f      	bne.n	8006990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <vPortEnterCritical+0x5c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <vPortEnterCritical+0x4c>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	603b      	str	r3, [r7, #0]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vPortEnterCritical+0x4a>
	}
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <vPortExitCritical+0x50>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <vPortExitCritical+0x24>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <vPortExitCritical+0x50>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <vPortExitCritical+0x50>)
 80069d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069d2:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <vPortExitCritical+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <vPortExitCritical+0x42>
 80069da:	2300      	movs	r3, #0
 80069dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f383 8811 	msr	BASEPRI, r3
}
 80069e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
	...

08006a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a00:	f3ef 8009 	mrs	r0, PSP
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <pxCurrentTCBConst>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f01e 0f10 	tst.w	lr, #16
 8006a10:	bf08      	it	eq
 8006a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a24:	f380 8811 	msr	BASEPRI, r0
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f7ff fab4 	bl	8005f9c <vTaskSwitchContext>
 8006a34:	f04f 0000 	mov.w	r0, #0
 8006a38:	f380 8811 	msr	BASEPRI, r0
 8006a3c:	bc09      	pop	{r0, r3}
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	6808      	ldr	r0, [r1, #0]
 8006a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a46:	f01e 0f10 	tst.w	lr, #16
 8006a4a:	bf08      	it	eq
 8006a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a50:	f380 8809 	msr	PSP, r0
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst>:
 8006a60:	20000ad8 	.word	0x20000ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	607b      	str	r3, [r7, #4]
}
 8006a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f7ff f9d3 	bl	8005e2c <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <SysTick_Handler+0x40>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
}
 8006a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortSetupTimerInterrupt+0x38>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <vPortSetupTimerInterrupt+0x3c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <vPortSetupTimerInterrupt+0x40>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	099b      	lsrs	r3, r3, #6
 8006ac8:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <vPortSetupTimerInterrupt+0x44>)
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <vPortSetupTimerInterrupt+0x34>)
 8006ad0:	2207      	movs	r2, #7
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	e000e010 	.word	0xe000e010
 8006ae4:	e000e018 	.word	0xe000e018
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	10624dd3 	.word	0x10624dd3
 8006af0:	e000e014 	.word	0xe000e014

08006af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b04 <vPortEnableVFP+0x10>
 8006af8:	6801      	ldr	r1, [r0, #0]
 8006afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006afe:	6001      	str	r1, [r0, #0]
 8006b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b02:	bf00      	nop
 8006b04:	e000ed88 	.word	0xe000ed88

08006b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b0e:	f3ef 8305 	mrs	r3, IPSR
 8006b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b0f      	cmp	r3, #15
 8006b18:	d914      	bls.n	8006b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b1a:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <vPortValidateInterruptPriority+0x70>)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b24:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <vPortValidateInterruptPriority+0x74>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	7afa      	ldrb	r2, [r7, #11]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20a      	bcs.n	8006b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b44:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <vPortValidateInterruptPriority+0x78>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <vPortValidateInterruptPriority+0x7c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d90a      	bls.n	8006b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	603b      	str	r3, [r7, #0]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <vPortValidateInterruptPriority+0x60>
	}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	e000e3f0 	.word	0xe000e3f0
 8006b7c:	20000c04 	.word	0x20000c04
 8006b80:	e000ed0c 	.word	0xe000ed0c
 8006b84:	20000c08 	.word	0x20000c08

08006b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b94:	f7ff f8a0 	bl	8005cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b98:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <pvPortMalloc+0x180>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ba0:	f000 f920 	bl	8006de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ba4:	4b59      	ldr	r3, [pc, #356]	; (8006d0c <pvPortMalloc+0x184>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f040 8093 	bne.w	8006cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01d      	beq.n	8006bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bb8:	2208      	movs	r2, #8
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d014      	beq.n	8006bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f023 0307 	bic.w	r3, r3, #7
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <pvPortMalloc+0x6c>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	617b      	str	r3, [r7, #20]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d06e      	beq.n	8006cd8 <pvPortMalloc+0x150>
 8006bfa:	4b45      	ldr	r3, [pc, #276]	; (8006d10 <pvPortMalloc+0x188>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d869      	bhi.n	8006cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c04:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <pvPortMalloc+0x18c>)
 8006c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c08:	4b42      	ldr	r3, [pc, #264]	; (8006d14 <pvPortMalloc+0x18c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c0e:	e004      	b.n	8006c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d903      	bls.n	8006c2c <pvPortMalloc+0xa4>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f1      	bne.n	8006c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c2c:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <pvPortMalloc+0x180>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d050      	beq.n	8006cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	4413      	add	r3, r2
 8006c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	2308      	movs	r3, #8
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d91f      	bls.n	8006c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <pvPortMalloc+0xf8>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	613b      	str	r3, [r7, #16]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c92:	69b8      	ldr	r0, [r7, #24]
 8006c94:	f000 f908 	bl	8006ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c98:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <pvPortMalloc+0x188>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <pvPortMalloc+0x188>)
 8006ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <pvPortMalloc+0x188>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <pvPortMalloc+0x190>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d203      	bcs.n	8006cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cb2:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <pvPortMalloc+0x188>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <pvPortMalloc+0x190>)
 8006cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <pvPortMalloc+0x184>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <pvPortMalloc+0x194>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a11      	ldr	r2, [pc, #68]	; (8006d1c <pvPortMalloc+0x194>)
 8006cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cd8:	f7ff f80c 	bl	8005cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <pvPortMalloc+0x174>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <pvPortMalloc+0x172>
	return pvReturn;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3728      	adds	r7, #40	; 0x28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20004814 	.word	0x20004814
 8006d0c:	20004828 	.word	0x20004828
 8006d10:	20004818 	.word	0x20004818
 8006d14:	2000480c 	.word	0x2000480c
 8006d18:	2000481c 	.word	0x2000481c
 8006d1c:	20004820 	.word	0x20004820

08006d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d04d      	beq.n	8006dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d32:	2308      	movs	r3, #8
 8006d34:	425b      	negs	r3, r3
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4413      	add	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	4b24      	ldr	r3, [pc, #144]	; (8006dd8 <vPortFree+0xb8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <vPortFree+0x44>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60fb      	str	r3, [r7, #12]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <vPortFree+0x62>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60bb      	str	r3, [r7, #8]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <vPortFree+0xb8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01e      	beq.n	8006dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11a      	bne.n	8006dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <vPortFree+0xb8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da8:	f7fe ff96 	bl	8005cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <vPortFree+0xbc>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <vPortFree+0xbc>)
 8006db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f000 f874 	bl	8006ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <vPortFree+0xc0>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	4a06      	ldr	r2, [pc, #24]	; (8006de0 <vPortFree+0xc0>)
 8006dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dca:	f7fe ff93 	bl	8005cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20004828 	.word	0x20004828
 8006ddc:	20004818 	.word	0x20004818
 8006de0:	20004824 	.word	0x20004824

08006de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <prvHeapInit+0xac>)
 8006df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3307      	adds	r3, #7
 8006e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0307 	bic.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <prvHeapInit+0xac>)
 8006e14:	4413      	add	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <prvHeapInit+0xb0>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <prvHeapInit+0xb0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e30:	2208      	movs	r2, #8
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <prvHeapInit+0xb4>)
 8006e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <prvHeapInit+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvHeapInit+0xb4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e64:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <prvHeapInit+0xb4>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <prvHeapInit+0xb8>)
 8006e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <prvHeapInit+0xbc>)
 8006e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <prvHeapInit+0xc0>)
 8006e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20000c0c 	.word	0x20000c0c
 8006e94:	2000480c 	.word	0x2000480c
 8006e98:	20004814 	.word	0x20004814
 8006e9c:	2000481c 	.word	0x2000481c
 8006ea0:	20004818 	.word	0x20004818
 8006ea4:	20004828 	.word	0x20004828

08006ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <prvInsertBlockIntoFreeList+0xac>)
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e002      	b.n	8006ebc <prvInsertBlockIntoFreeList+0x14>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d8f7      	bhi.n	8006eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d108      	bne.n	8006eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d118      	bne.n	8006f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d00d      	beq.n	8006f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e008      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e003      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	2000480c 	.word	0x2000480c
 8006f58:	20004814 	.word	0x20004814

08006f5c <memset>:
 8006f5c:	4402      	add	r2, r0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d100      	bne.n	8006f66 <memset+0xa>
 8006f64:	4770      	bx	lr
 8006f66:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6a:	e7f9      	b.n	8006f60 <memset+0x4>

08006f6c <_reclaim_reent>:
 8006f6c:	4b29      	ldr	r3, [pc, #164]	; (8007014 <_reclaim_reent+0xa8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4283      	cmp	r3, r0
 8006f72:	b570      	push	{r4, r5, r6, lr}
 8006f74:	4604      	mov	r4, r0
 8006f76:	d04b      	beq.n	8007010 <_reclaim_reent+0xa4>
 8006f78:	69c3      	ldr	r3, [r0, #28]
 8006f7a:	b143      	cbz	r3, 8006f8e <_reclaim_reent+0x22>
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d144      	bne.n	800700c <_reclaim_reent+0xa0>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	6819      	ldr	r1, [r3, #0]
 8006f86:	b111      	cbz	r1, 8006f8e <_reclaim_reent+0x22>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f86b 	bl	8007064 <_free_r>
 8006f8e:	6961      	ldr	r1, [r4, #20]
 8006f90:	b111      	cbz	r1, 8006f98 <_reclaim_reent+0x2c>
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f866 	bl	8007064 <_free_r>
 8006f98:	69e1      	ldr	r1, [r4, #28]
 8006f9a:	b111      	cbz	r1, 8006fa2 <_reclaim_reent+0x36>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 f861 	bl	8007064 <_free_r>
 8006fa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006fa4:	b111      	cbz	r1, 8006fac <_reclaim_reent+0x40>
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 f85c 	bl	8007064 <_free_r>
 8006fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fae:	b111      	cbz	r1, 8006fb6 <_reclaim_reent+0x4a>
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 f857 	bl	8007064 <_free_r>
 8006fb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fb8:	b111      	cbz	r1, 8006fc0 <_reclaim_reent+0x54>
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f852 	bl	8007064 <_free_r>
 8006fc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fc2:	b111      	cbz	r1, 8006fca <_reclaim_reent+0x5e>
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 f84d 	bl	8007064 <_free_r>
 8006fca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006fcc:	b111      	cbz	r1, 8006fd4 <_reclaim_reent+0x68>
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f848 	bl	8007064 <_free_r>
 8006fd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006fd6:	b111      	cbz	r1, 8006fde <_reclaim_reent+0x72>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 f843 	bl	8007064 <_free_r>
 8006fde:	6a23      	ldr	r3, [r4, #32]
 8006fe0:	b1b3      	cbz	r3, 8007010 <_reclaim_reent+0xa4>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fe8:	4718      	bx	r3
 8006fea:	5949      	ldr	r1, [r1, r5]
 8006fec:	b941      	cbnz	r1, 8007000 <_reclaim_reent+0x94>
 8006fee:	3504      	adds	r5, #4
 8006ff0:	69e3      	ldr	r3, [r4, #28]
 8006ff2:	2d80      	cmp	r5, #128	; 0x80
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	d1f8      	bne.n	8006fea <_reclaim_reent+0x7e>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f833 	bl	8007064 <_free_r>
 8006ffe:	e7c0      	b.n	8006f82 <_reclaim_reent+0x16>
 8007000:	680e      	ldr	r6, [r1, #0]
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f82e 	bl	8007064 <_free_r>
 8007008:	4631      	mov	r1, r6
 800700a:	e7ef      	b.n	8006fec <_reclaim_reent+0x80>
 800700c:	2500      	movs	r5, #0
 800700e:	e7ef      	b.n	8006ff0 <_reclaim_reent+0x84>
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	bf00      	nop
 8007014:	2000005c 	.word	0x2000005c

08007018 <__libc_init_array>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4d0d      	ldr	r5, [pc, #52]	; (8007050 <__libc_init_array+0x38>)
 800701c:	4c0d      	ldr	r4, [pc, #52]	; (8007054 <__libc_init_array+0x3c>)
 800701e:	1b64      	subs	r4, r4, r5
 8007020:	10a4      	asrs	r4, r4, #2
 8007022:	2600      	movs	r6, #0
 8007024:	42a6      	cmp	r6, r4
 8007026:	d109      	bne.n	800703c <__libc_init_array+0x24>
 8007028:	4d0b      	ldr	r5, [pc, #44]	; (8007058 <__libc_init_array+0x40>)
 800702a:	4c0c      	ldr	r4, [pc, #48]	; (800705c <__libc_init_array+0x44>)
 800702c:	f000 f872 	bl	8007114 <_init>
 8007030:	1b64      	subs	r4, r4, r5
 8007032:	10a4      	asrs	r4, r4, #2
 8007034:	2600      	movs	r6, #0
 8007036:	42a6      	cmp	r6, r4
 8007038:	d105      	bne.n	8007046 <__libc_init_array+0x2e>
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007040:	4798      	blx	r3
 8007042:	3601      	adds	r6, #1
 8007044:	e7ee      	b.n	8007024 <__libc_init_array+0xc>
 8007046:	f855 3b04 	ldr.w	r3, [r5], #4
 800704a:	4798      	blx	r3
 800704c:	3601      	adds	r6, #1
 800704e:	e7f2      	b.n	8007036 <__libc_init_array+0x1e>
 8007050:	0800720c 	.word	0x0800720c
 8007054:	0800720c 	.word	0x0800720c
 8007058:	0800720c 	.word	0x0800720c
 800705c:	08007210 	.word	0x08007210

08007060 <__retarget_lock_acquire_recursive>:
 8007060:	4770      	bx	lr

08007062 <__retarget_lock_release_recursive>:
 8007062:	4770      	bx	lr

08007064 <_free_r>:
 8007064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007066:	2900      	cmp	r1, #0
 8007068:	d044      	beq.n	80070f4 <_free_r+0x90>
 800706a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800706e:	9001      	str	r0, [sp, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f1a1 0404 	sub.w	r4, r1, #4
 8007076:	bfb8      	it	lt
 8007078:	18e4      	addlt	r4, r4, r3
 800707a:	f000 f83f 	bl	80070fc <__malloc_lock>
 800707e:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <_free_r+0x94>)
 8007080:	9801      	ldr	r0, [sp, #4]
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	b933      	cbnz	r3, 8007094 <_free_r+0x30>
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	6014      	str	r4, [r2, #0]
 800708a:	b003      	add	sp, #12
 800708c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007090:	f000 b83a 	b.w	8007108 <__malloc_unlock>
 8007094:	42a3      	cmp	r3, r4
 8007096:	d908      	bls.n	80070aa <_free_r+0x46>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf01      	itttt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	1949      	addeq	r1, r1, r5
 80070a6:	6021      	streq	r1, [r4, #0]
 80070a8:	e7ed      	b.n	8007086 <_free_r+0x22>
 80070aa:	461a      	mov	r2, r3
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	b10b      	cbz	r3, 80070b4 <_free_r+0x50>
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	d9fa      	bls.n	80070aa <_free_r+0x46>
 80070b4:	6811      	ldr	r1, [r2, #0]
 80070b6:	1855      	adds	r5, r2, r1
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	d10b      	bne.n	80070d4 <_free_r+0x70>
 80070bc:	6824      	ldr	r4, [r4, #0]
 80070be:	4421      	add	r1, r4
 80070c0:	1854      	adds	r4, r2, r1
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	6011      	str	r1, [r2, #0]
 80070c6:	d1e0      	bne.n	800708a <_free_r+0x26>
 80070c8:	681c      	ldr	r4, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	6053      	str	r3, [r2, #4]
 80070ce:	440c      	add	r4, r1
 80070d0:	6014      	str	r4, [r2, #0]
 80070d2:	e7da      	b.n	800708a <_free_r+0x26>
 80070d4:	d902      	bls.n	80070dc <_free_r+0x78>
 80070d6:	230c      	movs	r3, #12
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	e7d6      	b.n	800708a <_free_r+0x26>
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	1961      	adds	r1, r4, r5
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf04      	itt	eq
 80070e4:	6819      	ldreq	r1, [r3, #0]
 80070e6:	685b      	ldreq	r3, [r3, #4]
 80070e8:	6063      	str	r3, [r4, #4]
 80070ea:	bf04      	itt	eq
 80070ec:	1949      	addeq	r1, r1, r5
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	6054      	str	r4, [r2, #4]
 80070f2:	e7ca      	b.n	800708a <_free_r+0x26>
 80070f4:	b003      	add	sp, #12
 80070f6:	bd30      	pop	{r4, r5, pc}
 80070f8:	20004968 	.word	0x20004968

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__malloc_lock+0x8>)
 80070fe:	f7ff bfaf 	b.w	8007060 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20004964 	.word	0x20004964

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__malloc_unlock+0x8>)
 800710a:	f7ff bfaa 	b.w	8007062 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20004964 	.word	0x20004964

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr
